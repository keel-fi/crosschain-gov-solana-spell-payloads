/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getPermissionStatusDecoder,
  getPermissionStatusEncoder,
  type PermissionStatus,
  type PermissionStatusArgs,
} from '../types';

export const MANAGE_PERMISSION_DISCRIMINATOR = 3;

export function getManagePermissionDiscriminatorBytes() {
  return getU8Encoder().encode(MANAGE_PERMISSION_DISCRIMINATOR);
}

export type ManagePermissionInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountSuperAuthority extends string | AccountMeta<string> = string,
  TAccountSuperPermission extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPermission extends string | AccountMeta<string> = string,
  TAccountProgramId extends
    | string
    | AccountMeta<string> = 'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountSuperAuthority extends string
        ? ReadonlySignerAccount<TAccountSuperAuthority> &
            AccountSignerMeta<TAccountSuperAuthority>
        : TAccountSuperAuthority,
      TAccountSuperPermission extends string
        ? ReadonlyAccount<TAccountSuperPermission>
        : TAccountSuperPermission,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPermission extends string
        ? WritableAccount<TAccountPermission>
        : TAccountPermission,
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ManagePermissionInstructionData = {
  discriminator: number;
  status: PermissionStatus;
  canManagePermissions: boolean;
  canInvokeExternalTransfer: boolean;
  canExecuteSwap: boolean;
  canReallocate: boolean;
  canFreezeController: boolean;
  canUnfreezeController: boolean;
  canManageReservesAndIntegrations: boolean;
  canSuspendPermissions: boolean;
  canLiquidate: boolean;
};

export type ManagePermissionInstructionDataArgs = {
  status: PermissionStatusArgs;
  canManagePermissions: boolean;
  canInvokeExternalTransfer: boolean;
  canExecuteSwap: boolean;
  canReallocate: boolean;
  canFreezeController: boolean;
  canUnfreezeController: boolean;
  canManageReservesAndIntegrations: boolean;
  canSuspendPermissions: boolean;
  canLiquidate: boolean;
};

export function getManagePermissionInstructionDataEncoder(): FixedSizeEncoder<ManagePermissionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['status', getPermissionStatusEncoder()],
      ['canManagePermissions', getBooleanEncoder()],
      ['canInvokeExternalTransfer', getBooleanEncoder()],
      ['canExecuteSwap', getBooleanEncoder()],
      ['canReallocate', getBooleanEncoder()],
      ['canFreezeController', getBooleanEncoder()],
      ['canUnfreezeController', getBooleanEncoder()],
      ['canManageReservesAndIntegrations', getBooleanEncoder()],
      ['canSuspendPermissions', getBooleanEncoder()],
      ['canLiquidate', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: MANAGE_PERMISSION_DISCRIMINATOR })
  );
}

export function getManagePermissionInstructionDataDecoder(): FixedSizeDecoder<ManagePermissionInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['status', getPermissionStatusDecoder()],
    ['canManagePermissions', getBooleanDecoder()],
    ['canInvokeExternalTransfer', getBooleanDecoder()],
    ['canExecuteSwap', getBooleanDecoder()],
    ['canReallocate', getBooleanDecoder()],
    ['canFreezeController', getBooleanDecoder()],
    ['canUnfreezeController', getBooleanDecoder()],
    ['canManageReservesAndIntegrations', getBooleanDecoder()],
    ['canSuspendPermissions', getBooleanDecoder()],
    ['canLiquidate', getBooleanDecoder()],
  ]);
}

export function getManagePermissionInstructionDataCodec(): FixedSizeCodec<
  ManagePermissionInstructionDataArgs,
  ManagePermissionInstructionData
> {
  return combineCodec(
    getManagePermissionInstructionDataEncoder(),
    getManagePermissionInstructionDataDecoder()
  );
}

export type ManagePermissionInput<
  TAccountPayer extends string = string,
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountSuperAuthority extends string = string,
  TAccountSuperPermission extends string = string,
  TAccountAuthority extends string = string,
  TAccountPermission extends string = string,
  TAccountProgramId extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  superAuthority: TransactionSigner<TAccountSuperAuthority>;
  superPermission: Address<TAccountSuperPermission>;
  authority: Address<TAccountAuthority>;
  permission: Address<TAccountPermission>;
  programId?: Address<TAccountProgramId>;
  systemProgram?: Address<TAccountSystemProgram>;
  status: ManagePermissionInstructionDataArgs['status'];
  canManagePermissions: ManagePermissionInstructionDataArgs['canManagePermissions'];
  canInvokeExternalTransfer: ManagePermissionInstructionDataArgs['canInvokeExternalTransfer'];
  canExecuteSwap: ManagePermissionInstructionDataArgs['canExecuteSwap'];
  canReallocate: ManagePermissionInstructionDataArgs['canReallocate'];
  canFreezeController: ManagePermissionInstructionDataArgs['canFreezeController'];
  canUnfreezeController: ManagePermissionInstructionDataArgs['canUnfreezeController'];
  canManageReservesAndIntegrations: ManagePermissionInstructionDataArgs['canManageReservesAndIntegrations'];
  canSuspendPermissions: ManagePermissionInstructionDataArgs['canSuspendPermissions'];
  canLiquidate: ManagePermissionInstructionDataArgs['canLiquidate'];
};

export function getManagePermissionInstruction<
  TAccountPayer extends string,
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountSuperAuthority extends string,
  TAccountSuperPermission extends string,
  TAccountAuthority extends string,
  TAccountPermission extends string,
  TAccountProgramId extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: ManagePermissionInput<
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountSuperAuthority,
    TAccountSuperPermission,
    TAccountAuthority,
    TAccountPermission,
    TAccountProgramId,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ManagePermissionInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountController,
  TAccountControllerAuthority,
  TAccountSuperAuthority,
  TAccountSuperPermission,
  TAccountAuthority,
  TAccountPermission,
  TAccountProgramId,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    superAuthority: { value: input.superAuthority ?? null, isWritable: false },
    superPermission: {
      value: input.superPermission ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    permission: { value: input.permission ?? null, isWritable: true },
    programId: { value: input.programId ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.superAuthority),
      getAccountMeta(accounts.superPermission),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.permission),
      getAccountMeta(accounts.programId),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getManagePermissionInstructionDataEncoder().encode(
      args as ManagePermissionInstructionDataArgs
    ),
    programAddress,
  } as ManagePermissionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountSuperAuthority,
    TAccountSuperPermission,
    TAccountAuthority,
    TAccountPermission,
    TAccountProgramId,
    TAccountSystemProgram
  >);
}

export type ParsedManagePermissionInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    controller: TAccountMetas[1];
    controllerAuthority: TAccountMetas[2];
    superAuthority: TAccountMetas[3];
    superPermission: TAccountMetas[4];
    authority: TAccountMetas[5];
    permission: TAccountMetas[6];
    programId: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: ManagePermissionInstructionData;
};

export function parseManagePermissionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedManagePermissionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      superAuthority: getNextAccount(),
      superPermission: getNextAccount(),
      authority: getNextAccount(),
      permission: getNextAccount(),
      programId: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getManagePermissionInstructionDataDecoder().decode(instruction.data),
  };
}
