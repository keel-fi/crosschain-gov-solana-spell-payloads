/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ATOMIC_SWAP_BORROW_DISCRIMINATOR = 15;

export function getAtomicSwapBorrowDiscriminatorBytes() {
  return getU8Encoder().encode(ATOMIC_SWAP_BORROW_DISCRIMINATOR);
}

export type AtomicSwapBorrowInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPermission extends string | AccountMeta<string> = string,
  TAccountIntegration extends string | AccountMeta<string> = string,
  TAccountReserveA extends string | AccountMeta<string> = string,
  TAccountVaultA extends string | AccountMeta<string> = string,
  TAccountMintA extends string | AccountMeta<string> = string,
  TAccountReserveB extends string | AccountMeta<string> = string,
  TAccountVaultB extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccountA extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccountB extends string | AccountMeta<string> = string,
  TAccountTokenProgramA extends string | AccountMeta<string> = string,
  TAccountSysvarInstruction extends
    | string
    | AccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountProgramId extends
    | string
    | AccountMeta<string> = 'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPermission extends string
        ? ReadonlyAccount<TAccountPermission>
        : TAccountPermission,
      TAccountIntegration extends string
        ? WritableAccount<TAccountIntegration>
        : TAccountIntegration,
      TAccountReserveA extends string
        ? WritableAccount<TAccountReserveA>
        : TAccountReserveA,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountReserveB extends string
        ? WritableAccount<TAccountReserveB>
        : TAccountReserveB,
      TAccountVaultB extends string
        ? ReadonlyAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountRecipientTokenAccountA extends string
        ? WritableAccount<TAccountRecipientTokenAccountA>
        : TAccountRecipientTokenAccountA,
      TAccountRecipientTokenAccountB extends string
        ? WritableAccount<TAccountRecipientTokenAccountB>
        : TAccountRecipientTokenAccountB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountSysvarInstruction extends string
        ? ReadonlyAccount<TAccountSysvarInstruction>
        : TAccountSysvarInstruction,
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      ...TRemainingAccounts,
    ]
  >;

export type AtomicSwapBorrowInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type AtomicSwapBorrowInstructionDataArgs = { amount: number | bigint };

export function getAtomicSwapBorrowInstructionDataEncoder(): FixedSizeEncoder<AtomicSwapBorrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ATOMIC_SWAP_BORROW_DISCRIMINATOR })
  );
}

export function getAtomicSwapBorrowInstructionDataDecoder(): FixedSizeDecoder<AtomicSwapBorrowInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getAtomicSwapBorrowInstructionDataCodec(): FixedSizeCodec<
  AtomicSwapBorrowInstructionDataArgs,
  AtomicSwapBorrowInstructionData
> {
  return combineCodec(
    getAtomicSwapBorrowInstructionDataEncoder(),
    getAtomicSwapBorrowInstructionDataDecoder()
  );
}

export type AtomicSwapBorrowInput<
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPermission extends string = string,
  TAccountIntegration extends string = string,
  TAccountReserveA extends string = string,
  TAccountVaultA extends string = string,
  TAccountMintA extends string = string,
  TAccountReserveB extends string = string,
  TAccountVaultB extends string = string,
  TAccountRecipientTokenAccountA extends string = string,
  TAccountRecipientTokenAccountB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountSysvarInstruction extends string = string,
  TAccountProgramId extends string = string,
> = {
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  permission: Address<TAccountPermission>;
  integration: Address<TAccountIntegration>;
  reserveA: Address<TAccountReserveA>;
  vaultA: Address<TAccountVaultA>;
  mintA: Address<TAccountMintA>;
  reserveB: Address<TAccountReserveB>;
  vaultB: Address<TAccountVaultB>;
  recipientTokenAccountA: Address<TAccountRecipientTokenAccountA>;
  recipientTokenAccountB: Address<TAccountRecipientTokenAccountB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  sysvarInstruction?: Address<TAccountSysvarInstruction>;
  programId?: Address<TAccountProgramId>;
  amount: AtomicSwapBorrowInstructionDataArgs['amount'];
};

export function getAtomicSwapBorrowInstruction<
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPermission extends string,
  TAccountIntegration extends string,
  TAccountReserveA extends string,
  TAccountVaultA extends string,
  TAccountMintA extends string,
  TAccountReserveB extends string,
  TAccountVaultB extends string,
  TAccountRecipientTokenAccountA extends string,
  TAccountRecipientTokenAccountB extends string,
  TAccountTokenProgramA extends string,
  TAccountSysvarInstruction extends string,
  TAccountProgramId extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: AtomicSwapBorrowInput<
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountReserveA,
    TAccountVaultA,
    TAccountMintA,
    TAccountReserveB,
    TAccountVaultB,
    TAccountRecipientTokenAccountA,
    TAccountRecipientTokenAccountB,
    TAccountTokenProgramA,
    TAccountSysvarInstruction,
    TAccountProgramId
  >,
  config?: { programAddress?: TProgramAddress }
): AtomicSwapBorrowInstruction<
  TProgramAddress,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPermission,
  TAccountIntegration,
  TAccountReserveA,
  TAccountVaultA,
  TAccountMintA,
  TAccountReserveB,
  TAccountVaultB,
  TAccountRecipientTokenAccountA,
  TAccountRecipientTokenAccountB,
  TAccountTokenProgramA,
  TAccountSysvarInstruction,
  TAccountProgramId
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    permission: { value: input.permission ?? null, isWritable: false },
    integration: { value: input.integration ?? null, isWritable: true },
    reserveA: { value: input.reserveA ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    reserveB: { value: input.reserveB ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: false },
    recipientTokenAccountA: {
      value: input.recipientTokenAccountA ?? null,
      isWritable: true,
    },
    recipientTokenAccountB: {
      value: input.recipientTokenAccountB ?? null,
      isWritable: true,
    },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    sysvarInstruction: {
      value: input.sysvarInstruction ?? null,
      isWritable: false,
    },
    programId: { value: input.programId ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.sysvarInstruction.value) {
    accounts.sysvarInstruction.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.permission),
      getAccountMeta(accounts.integration),
      getAccountMeta(accounts.reserveA),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.reserveB),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.recipientTokenAccountA),
      getAccountMeta(accounts.recipientTokenAccountB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.sysvarInstruction),
      getAccountMeta(accounts.programId),
    ],
    data: getAtomicSwapBorrowInstructionDataEncoder().encode(
      args as AtomicSwapBorrowInstructionDataArgs
    ),
    programAddress,
  } as AtomicSwapBorrowInstruction<
    TProgramAddress,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountReserveA,
    TAccountVaultA,
    TAccountMintA,
    TAccountReserveB,
    TAccountVaultB,
    TAccountRecipientTokenAccountA,
    TAccountRecipientTokenAccountB,
    TAccountTokenProgramA,
    TAccountSysvarInstruction,
    TAccountProgramId
  >);
}

export type ParsedAtomicSwapBorrowInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    controller: TAccountMetas[0];
    controllerAuthority: TAccountMetas[1];
    authority: TAccountMetas[2];
    permission: TAccountMetas[3];
    integration: TAccountMetas[4];
    reserveA: TAccountMetas[5];
    vaultA: TAccountMetas[6];
    mintA: TAccountMetas[7];
    reserveB: TAccountMetas[8];
    vaultB: TAccountMetas[9];
    recipientTokenAccountA: TAccountMetas[10];
    recipientTokenAccountB: TAccountMetas[11];
    tokenProgramA: TAccountMetas[12];
    sysvarInstruction: TAccountMetas[13];
    programId: TAccountMetas[14];
  };
  data: AtomicSwapBorrowInstructionData;
};

export function parseAtomicSwapBorrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAtomicSwapBorrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      permission: getNextAccount(),
      integration: getNextAccount(),
      reserveA: getNextAccount(),
      vaultA: getNextAccount(),
      mintA: getNextAccount(),
      reserveB: getNextAccount(),
      vaultB: getNextAccount(),
      recipientTokenAccountA: getNextAccount(),
      recipientTokenAccountB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      sysvarInstruction: getNextAccount(),
      programId: getNextAccount(),
    },
    data: getAtomicSwapBorrowInstructionDataDecoder().decode(instruction.data),
  };
}
