/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EMIT_EVENT_DISCRIMINATOR = 0;

export function getEmitEventDiscriminatorBytes() {
  return getU8Encoder().encode(EMIT_EVENT_DISCRIMINATOR);
}

export type EmitEventInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type EmitEventInstructionData = {
  discriminator: number;
  controllerId: ReadonlyUint8Array;
  data: ReadonlyUint8Array;
};

export type EmitEventInstructionDataArgs = {
  controllerId: ReadonlyUint8Array;
  data: ReadonlyUint8Array;
};

export function getEmitEventInstructionDataEncoder(): Encoder<EmitEventInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['controllerId', fixEncoderSize(getBytesEncoder(), 2)],
      ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: EMIT_EVENT_DISCRIMINATOR })
  );
}

export function getEmitEventInstructionDataDecoder(): Decoder<EmitEventInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['controllerId', fixDecoderSize(getBytesDecoder(), 2)],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getEmitEventInstructionDataCodec(): Codec<
  EmitEventInstructionDataArgs,
  EmitEventInstructionData
> {
  return combineCodec(
    getEmitEventInstructionDataEncoder(),
    getEmitEventInstructionDataDecoder()
  );
}

export type EmitEventInput<TAccountAuthority extends string = string> = {
  authority: TransactionSigner<TAccountAuthority>;
  controllerId: EmitEventInstructionDataArgs['controllerId'];
  data: EmitEventInstructionDataArgs['data'];
};

export function getEmitEventInstruction<
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: EmitEventInput<TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): EmitEventInstruction<TProgramAddress, TAccountAuthority> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.authority)],
    data: getEmitEventInstructionDataEncoder().encode(
      args as EmitEventInstructionDataArgs
    ),
    programAddress,
  } as EmitEventInstruction<TProgramAddress, TAccountAuthority>);
}

export type ParsedEmitEventInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
  };
  data: EmitEventInstructionData;
};

export function parseEmitEventInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedEmitEventInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { authority: getNextAccount() },
    data: getEmitEventInstructionDataDecoder().decode(instruction.data),
  };
}
