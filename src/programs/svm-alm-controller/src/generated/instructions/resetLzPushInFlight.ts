/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RESET_LZ_PUSH_IN_FLIGHT_DISCRIMINATOR = 17;

export function getResetLzPushInFlightDiscriminatorBytes() {
  return getU8Encoder().encode(RESET_LZ_PUSH_IN_FLIGHT_DISCRIMINATOR);
}

export type ResetLzPushInFlightInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountIntegration extends string | AccountMeta<string> = string,
  TAccountSysvarInstruction extends
    | string
    | AccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountIntegration extends string
        ? WritableAccount<TAccountIntegration>
        : TAccountIntegration,
      TAccountSysvarInstruction extends string
        ? ReadonlyAccount<TAccountSysvarInstruction>
        : TAccountSysvarInstruction,
      ...TRemainingAccounts,
    ]
  >;

export type ResetLzPushInFlightInstructionData = { discriminator: number };

export type ResetLzPushInFlightInstructionDataArgs = {};

export function getResetLzPushInFlightInstructionDataEncoder(): FixedSizeEncoder<ResetLzPushInFlightInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: RESET_LZ_PUSH_IN_FLIGHT_DISCRIMINATOR,
    })
  );
}

export function getResetLzPushInFlightInstructionDataDecoder(): FixedSizeDecoder<ResetLzPushInFlightInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getResetLzPushInFlightInstructionDataCodec(): FixedSizeCodec<
  ResetLzPushInFlightInstructionDataArgs,
  ResetLzPushInFlightInstructionData
> {
  return combineCodec(
    getResetLzPushInFlightInstructionDataEncoder(),
    getResetLzPushInFlightInstructionDataDecoder()
  );
}

export type ResetLzPushInFlightInput<
  TAccountController extends string = string,
  TAccountIntegration extends string = string,
  TAccountSysvarInstruction extends string = string,
> = {
  controller: Address<TAccountController>;
  integration: Address<TAccountIntegration>;
  sysvarInstruction?: Address<TAccountSysvarInstruction>;
};

export function getResetLzPushInFlightInstruction<
  TAccountController extends string,
  TAccountIntegration extends string,
  TAccountSysvarInstruction extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: ResetLzPushInFlightInput<
    TAccountController,
    TAccountIntegration,
    TAccountSysvarInstruction
  >,
  config?: { programAddress?: TProgramAddress }
): ResetLzPushInFlightInstruction<
  TProgramAddress,
  TAccountController,
  TAccountIntegration,
  TAccountSysvarInstruction
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: false },
    integration: { value: input.integration ?? null, isWritable: true },
    sysvarInstruction: {
      value: input.sysvarInstruction ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.sysvarInstruction.value) {
    accounts.sysvarInstruction.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.integration),
      getAccountMeta(accounts.sysvarInstruction),
    ],
    data: getResetLzPushInFlightInstructionDataEncoder().encode({}),
    programAddress,
  } as ResetLzPushInFlightInstruction<
    TProgramAddress,
    TAccountController,
    TAccountIntegration,
    TAccountSysvarInstruction
  >);
}

export type ParsedResetLzPushInFlightInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    controller: TAccountMetas[0];
    integration: TAccountMetas[1];
    sysvarInstruction: TAccountMetas[2];
  };
  data: ResetLzPushInFlightInstructionData;
};

export function parseResetLzPushInFlightInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedResetLzPushInFlightInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      controller: getNextAccount(),
      integration: getNextAccount(),
      sysvarInstruction: getNextAccount(),
    },
    data: getResetLzPushInFlightInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
