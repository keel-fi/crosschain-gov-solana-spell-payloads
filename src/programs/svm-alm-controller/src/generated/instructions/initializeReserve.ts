/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getReserveStatusDecoder,
  getReserveStatusEncoder,
  type ReserveStatus,
  type ReserveStatusArgs,
} from '../types';

export const INITIALIZE_RESERVE_DISCRIMINATOR = 4;

export function getInitializeReserveDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_RESERVE_DISCRIMINATOR);
}

export type InitializeReserveInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPermission extends string | AccountMeta<string> = string,
  TAccountReserve extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | AccountMeta<string> = string,
  TAccountProgramId extends
    | string
    | AccountMeta<string> = 'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPermission extends string
        ? ReadonlyAccount<TAccountPermission>
        : TAccountPermission,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeReserveInstructionData = {
  discriminator: number;
  status: ReserveStatus;
  rateLimitSlope: bigint;
  rateLimitMaxOutflow: bigint;
};

export type InitializeReserveInstructionDataArgs = {
  status: ReserveStatusArgs;
  rateLimitSlope: number | bigint;
  rateLimitMaxOutflow: number | bigint;
};

export function getInitializeReserveInstructionDataEncoder(): FixedSizeEncoder<InitializeReserveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['status', getReserveStatusEncoder()],
      ['rateLimitSlope', getU64Encoder()],
      ['rateLimitMaxOutflow', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_RESERVE_DISCRIMINATOR })
  );
}

export function getInitializeReserveInstructionDataDecoder(): FixedSizeDecoder<InitializeReserveInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['status', getReserveStatusDecoder()],
    ['rateLimitSlope', getU64Decoder()],
    ['rateLimitMaxOutflow', getU64Decoder()],
  ]);
}

export function getInitializeReserveInstructionDataCodec(): FixedSizeCodec<
  InitializeReserveInstructionDataArgs,
  InitializeReserveInstructionData
> {
  return combineCodec(
    getInitializeReserveInstructionDataEncoder(),
    getInitializeReserveInstructionDataDecoder()
  );
}

export type InitializeReserveInput<
  TAccountPayer extends string = string,
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPermission extends string = string,
  TAccountReserve extends string = string,
  TAccountMint extends string = string,
  TAccountVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountProgramId extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  permission: Address<TAccountPermission>;
  reserve: Address<TAccountReserve>;
  mint: Address<TAccountMint>;
  vault: Address<TAccountVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  programId?: Address<TAccountProgramId>;
  systemProgram?: Address<TAccountSystemProgram>;
  status: InitializeReserveInstructionDataArgs['status'];
  rateLimitSlope: InitializeReserveInstructionDataArgs['rateLimitSlope'];
  rateLimitMaxOutflow: InitializeReserveInstructionDataArgs['rateLimitMaxOutflow'];
};

export function getInitializeReserveInstruction<
  TAccountPayer extends string,
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPermission extends string,
  TAccountReserve extends string,
  TAccountMint extends string,
  TAccountVault extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountProgramId extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: InitializeReserveInput<
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountReserve,
    TAccountMint,
    TAccountVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountProgramId,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeReserveInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPermission,
  TAccountReserve,
  TAccountMint,
  TAccountVault,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountProgramId,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    permission: { value: input.permission ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    programId: { value: input.programId ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.permission),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.programId),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeReserveInstructionDataEncoder().encode(
      args as InitializeReserveInstructionDataArgs
    ),
    programAddress,
  } as InitializeReserveInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountReserve,
    TAccountMint,
    TAccountVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountProgramId,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeReserveInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    controller: TAccountMetas[1];
    controllerAuthority: TAccountMetas[2];
    authority: TAccountMetas[3];
    permission: TAccountMetas[4];
    reserve: TAccountMetas[5];
    mint: TAccountMetas[6];
    vault: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    programId: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
  };
  data: InitializeReserveInstructionData;
};

export function parseInitializeReserveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeReserveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      permission: getNextAccount(),
      reserve: getNextAccount(),
      mint: getNextAccount(),
      vault: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      programId: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeReserveInstructionDataDecoder().decode(instruction.data),
  };
}
