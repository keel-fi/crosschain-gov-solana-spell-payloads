/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getFeedArgsDecoder,
  getFeedArgsEncoder,
  type FeedArgs,
  type FeedArgsArgs,
} from '../types';

export const UPDATE_ORACLE_DISCRIMINATOR = 13;

export function getUpdateOracleDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_ORACLE_DISCRIMINATOR);
}

export type UpdateOracleInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPriceFeed extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountNewAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPriceFeed extends string
        ? ReadonlyAccount<TAccountPriceFeed>
        : TAccountPriceFeed,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountNewAuthority extends string
        ? ReadonlySignerAccount<TAccountNewAuthority> &
            AccountSignerMeta<TAccountNewAuthority>
        : TAccountNewAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateOracleInstructionData = {
  discriminator: number;
  feedArgs: Option<FeedArgs>;
};

export type UpdateOracleInstructionDataArgs = {
  feedArgs: OptionOrNullable<FeedArgsArgs>;
};

export function getUpdateOracleInstructionDataEncoder(): Encoder<UpdateOracleInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['feedArgs', getOptionEncoder(getFeedArgsEncoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_ORACLE_DISCRIMINATOR })
  );
}

export function getUpdateOracleInstructionDataDecoder(): Decoder<UpdateOracleInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['feedArgs', getOptionDecoder(getFeedArgsDecoder())],
  ]);
}

export function getUpdateOracleInstructionDataCodec(): Codec<
  UpdateOracleInstructionDataArgs,
  UpdateOracleInstructionData
> {
  return combineCodec(
    getUpdateOracleInstructionDataEncoder(),
    getUpdateOracleInstructionDataDecoder()
  );
}

export type UpdateOracleInput<
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPriceFeed extends string = string,
  TAccountOracle extends string = string,
  TAccountNewAuthority extends string = string,
> = {
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  priceFeed: Address<TAccountPriceFeed>;
  oracle: Address<TAccountOracle>;
  newAuthority?: TransactionSigner<TAccountNewAuthority>;
  feedArgs: UpdateOracleInstructionDataArgs['feedArgs'];
};

export function getUpdateOracleInstruction<
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPriceFeed extends string,
  TAccountOracle extends string,
  TAccountNewAuthority extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: UpdateOracleInput<
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPriceFeed,
    TAccountOracle,
    TAccountNewAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateOracleInstruction<
  TProgramAddress,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPriceFeed,
  TAccountOracle,
  TAccountNewAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    priceFeed: { value: input.priceFeed ?? null, isWritable: false },
    oracle: { value: input.oracle ?? null, isWritable: true },
    newAuthority: { value: input.newAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.priceFeed),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.newAuthority),
    ],
    data: getUpdateOracleInstructionDataEncoder().encode(
      args as UpdateOracleInstructionDataArgs
    ),
    programAddress,
  } as UpdateOracleInstruction<
    TProgramAddress,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPriceFeed,
    TAccountOracle,
    TAccountNewAuthority
  >);
}

export type ParsedUpdateOracleInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    controller: TAccountMetas[0];
    controllerAuthority: TAccountMetas[1];
    authority: TAccountMetas[2];
    priceFeed: TAccountMetas[3];
    oracle: TAccountMetas[4];
    newAuthority?: TAccountMetas[5] | undefined;
  };
  data: UpdateOracleInstructionData;
};

export function parseUpdateOracleInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateOracleInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SVM_ALM_CONTROLLER_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      priceFeed: getNextAccount(),
      oracle: getNextAccount(),
      newAuthority: getNextOptionalAccount(),
    },
    data: getUpdateOracleInstructionDataDecoder().decode(instruction.data),
  };
}
