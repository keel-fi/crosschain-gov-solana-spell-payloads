/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SYNC_DISCRIMINATOR = 9;

export function getSyncDiscriminatorBytes() {
  return getU8Encoder().encode(SYNC_DISCRIMINATOR);
}

export type SyncInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountIntegration extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountIntegration extends string
        ? WritableAccount<TAccountIntegration>
        : TAccountIntegration,
      ...TRemainingAccounts,
    ]
  >;

export type SyncInstructionData = { discriminator: number };

export type SyncInstructionDataArgs = {};

export function getSyncInstructionDataEncoder(): FixedSizeEncoder<SyncInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: SYNC_DISCRIMINATOR })
  );
}

export function getSyncInstructionDataDecoder(): FixedSizeDecoder<SyncInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getSyncInstructionDataCodec(): FixedSizeCodec<
  SyncInstructionDataArgs,
  SyncInstructionData
> {
  return combineCodec(
    getSyncInstructionDataEncoder(),
    getSyncInstructionDataDecoder()
  );
}

export type SyncInput<
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountIntegration extends string = string,
> = {
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  integration: Address<TAccountIntegration>;
};

export function getSyncInstruction<
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountIntegration extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: SyncInput<
    TAccountController,
    TAccountControllerAuthority,
    TAccountIntegration
  >,
  config?: { programAddress?: TProgramAddress }
): SyncInstruction<
  TProgramAddress,
  TAccountController,
  TAccountControllerAuthority,
  TAccountIntegration
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    integration: { value: input.integration ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.integration),
    ],
    data: getSyncInstructionDataEncoder().encode({}),
    programAddress,
  } as SyncInstruction<
    TProgramAddress,
    TAccountController,
    TAccountControllerAuthority,
    TAccountIntegration
  >);
}

export type ParsedSyncInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    controller: TAccountMetas[0];
    controllerAuthority: TAccountMetas[1];
    integration: TAccountMetas[2];
  };
  data: SyncInstructionData;
};

export function parseSyncInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSyncInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      integration: getNextAccount(),
    },
    data: getSyncInstructionDataDecoder().decode(instruction.data),
  };
}
