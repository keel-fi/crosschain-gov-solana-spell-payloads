/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getPushArgsDecoder,
  getPushArgsEncoder,
  type PushArgs,
  type PushArgsArgs,
} from '../types';

export const PUSH_DISCRIMINATOR = 10;

export function getPushDiscriminatorBytes() {
  return getU8Encoder().encode(PUSH_DISCRIMINATOR);
}

export type PushInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPermission extends string | AccountMeta<string> = string,
  TAccountIntegration extends string | AccountMeta<string> = string,
  TAccountReserveA extends string | AccountMeta<string> = string,
  TAccountReserveB extends string | AccountMeta<string> = string,
  TAccountProgramId extends
    | string
    | AccountMeta<string> = 'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPermission extends string
        ? ReadonlyAccount<TAccountPermission>
        : TAccountPermission,
      TAccountIntegration extends string
        ? WritableAccount<TAccountIntegration>
        : TAccountIntegration,
      TAccountReserveA extends string
        ? WritableAccount<TAccountReserveA>
        : TAccountReserveA,
      TAccountReserveB extends string
        ? WritableAccount<TAccountReserveB>
        : TAccountReserveB,
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      ...TRemainingAccounts,
    ]
  >;

export type PushInstructionData = { discriminator: number; pushArgs: PushArgs };

export type PushInstructionDataArgs = { pushArgs: PushArgsArgs };

export function getPushInstructionDataEncoder(): Encoder<PushInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['pushArgs', getPushArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PUSH_DISCRIMINATOR })
  );
}

export function getPushInstructionDataDecoder(): Decoder<PushInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['pushArgs', getPushArgsDecoder()],
  ]);
}

export function getPushInstructionDataCodec(): Codec<
  PushInstructionDataArgs,
  PushInstructionData
> {
  return combineCodec(
    getPushInstructionDataEncoder(),
    getPushInstructionDataDecoder()
  );
}

export type PushInput<
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPermission extends string = string,
  TAccountIntegration extends string = string,
  TAccountReserveA extends string = string,
  TAccountReserveB extends string = string,
  TAccountProgramId extends string = string,
> = {
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  permission: Address<TAccountPermission>;
  integration: Address<TAccountIntegration>;
  reserveA: Address<TAccountReserveA>;
  reserveB: Address<TAccountReserveB>;
  programId?: Address<TAccountProgramId>;
  pushArgs: PushInstructionDataArgs['pushArgs'];
};

export function getPushInstruction<
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPermission extends string,
  TAccountIntegration extends string,
  TAccountReserveA extends string,
  TAccountReserveB extends string,
  TAccountProgramId extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: PushInput<
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountReserveA,
    TAccountReserveB,
    TAccountProgramId
  >,
  config?: { programAddress?: TProgramAddress }
): PushInstruction<
  TProgramAddress,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPermission,
  TAccountIntegration,
  TAccountReserveA,
  TAccountReserveB,
  TAccountProgramId
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    permission: { value: input.permission ?? null, isWritable: false },
    integration: { value: input.integration ?? null, isWritable: true },
    reserveA: { value: input.reserveA ?? null, isWritable: true },
    reserveB: { value: input.reserveB ?? null, isWritable: true },
    programId: { value: input.programId ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.permission),
      getAccountMeta(accounts.integration),
      getAccountMeta(accounts.reserveA),
      getAccountMeta(accounts.reserveB),
      getAccountMeta(accounts.programId),
    ],
    data: getPushInstructionDataEncoder().encode(
      args as PushInstructionDataArgs
    ),
    programAddress,
  } as PushInstruction<
    TProgramAddress,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountReserveA,
    TAccountReserveB,
    TAccountProgramId
  >);
}

export type ParsedPushInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    controller: TAccountMetas[0];
    controllerAuthority: TAccountMetas[1];
    authority: TAccountMetas[2];
    permission: TAccountMetas[3];
    integration: TAccountMetas[4];
    reserveA: TAccountMetas[5];
    reserveB: TAccountMetas[6];
    programId: TAccountMetas[7];
  };
  data: PushInstructionData;
};

export function parsePushInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPushInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      permission: getNextAccount(),
      integration: getNextAccount(),
      reserveA: getNextAccount(),
      reserveB: getNextAccount(),
      programId: getNextAccount(),
    },
    data: getPushInstructionDataDecoder().decode(instruction.data),
  };
}
