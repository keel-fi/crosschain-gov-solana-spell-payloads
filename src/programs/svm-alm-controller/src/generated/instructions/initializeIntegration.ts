/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getInitializeArgsDecoder,
  getInitializeArgsEncoder,
  getIntegrationStatusDecoder,
  getIntegrationStatusEncoder,
  getIntegrationTypeDecoder,
  getIntegrationTypeEncoder,
  type InitializeArgs,
  type InitializeArgsArgs,
  type IntegrationStatus,
  type IntegrationStatusArgs,
  type IntegrationType,
  type IntegrationTypeArgs,
} from '../types';

export const INITIALIZE_INTEGRATION_DISCRIMINATOR = 6;

export function getInitializeIntegrationDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_INTEGRATION_DISCRIMINATOR);
}

export type InitializeIntegrationInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPermission extends string | AccountMeta<string> = string,
  TAccountIntegration extends string | AccountMeta<string> = string,
  TAccountProgramId extends
    | string
    | AccountMeta<string> = 'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPermission extends string
        ? ReadonlyAccount<TAccountPermission>
        : TAccountPermission,
      TAccountIntegration extends string
        ? WritableAccount<TAccountIntegration>
        : TAccountIntegration,
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeIntegrationInstructionData = {
  discriminator: number;
  integrationType: IntegrationType;
  status: IntegrationStatus;
  description: ReadonlyUint8Array;
  rateLimitSlope: bigint;
  rateLimitMaxOutflow: bigint;
  permitLiquidation: boolean;
  innerArgs: InitializeArgs;
};

export type InitializeIntegrationInstructionDataArgs = {
  integrationType: IntegrationTypeArgs;
  status: IntegrationStatusArgs;
  description: ReadonlyUint8Array;
  rateLimitSlope: number | bigint;
  rateLimitMaxOutflow: number | bigint;
  permitLiquidation: boolean;
  innerArgs: InitializeArgsArgs;
};

export function getInitializeIntegrationInstructionDataEncoder(): Encoder<InitializeIntegrationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['integrationType', getIntegrationTypeEncoder()],
      ['status', getIntegrationStatusEncoder()],
      ['description', fixEncoderSize(getBytesEncoder(), 32)],
      ['rateLimitSlope', getU64Encoder()],
      ['rateLimitMaxOutflow', getU64Encoder()],
      ['permitLiquidation', getBooleanEncoder()],
      ['innerArgs', getInitializeArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_INTEGRATION_DISCRIMINATOR,
    })
  );
}

export function getInitializeIntegrationInstructionDataDecoder(): Decoder<InitializeIntegrationInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['integrationType', getIntegrationTypeDecoder()],
    ['status', getIntegrationStatusDecoder()],
    ['description', fixDecoderSize(getBytesDecoder(), 32)],
    ['rateLimitSlope', getU64Decoder()],
    ['rateLimitMaxOutflow', getU64Decoder()],
    ['permitLiquidation', getBooleanDecoder()],
    ['innerArgs', getInitializeArgsDecoder()],
  ]);
}

export function getInitializeIntegrationInstructionDataCodec(): Codec<
  InitializeIntegrationInstructionDataArgs,
  InitializeIntegrationInstructionData
> {
  return combineCodec(
    getInitializeIntegrationInstructionDataEncoder(),
    getInitializeIntegrationInstructionDataDecoder()
  );
}

export type InitializeIntegrationInput<
  TAccountPayer extends string = string,
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPermission extends string = string,
  TAccountIntegration extends string = string,
  TAccountProgramId extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  permission: Address<TAccountPermission>;
  integration: Address<TAccountIntegration>;
  programId?: Address<TAccountProgramId>;
  systemProgram?: Address<TAccountSystemProgram>;
  integrationType: InitializeIntegrationInstructionDataArgs['integrationType'];
  status: InitializeIntegrationInstructionDataArgs['status'];
  description: InitializeIntegrationInstructionDataArgs['description'];
  rateLimitSlope: InitializeIntegrationInstructionDataArgs['rateLimitSlope'];
  rateLimitMaxOutflow: InitializeIntegrationInstructionDataArgs['rateLimitMaxOutflow'];
  permitLiquidation: InitializeIntegrationInstructionDataArgs['permitLiquidation'];
  innerArgs: InitializeIntegrationInstructionDataArgs['innerArgs'];
};

export function getInitializeIntegrationInstruction<
  TAccountPayer extends string,
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPermission extends string,
  TAccountIntegration extends string,
  TAccountProgramId extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: InitializeIntegrationInput<
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountProgramId,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeIntegrationInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPermission,
  TAccountIntegration,
  TAccountProgramId,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    permission: { value: input.permission ?? null, isWritable: false },
    integration: { value: input.integration ?? null, isWritable: true },
    programId: { value: input.programId ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.permission),
      getAccountMeta(accounts.integration),
      getAccountMeta(accounts.programId),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeIntegrationInstructionDataEncoder().encode(
      args as InitializeIntegrationInstructionDataArgs
    ),
    programAddress,
  } as InitializeIntegrationInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountProgramId,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeIntegrationInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    controller: TAccountMetas[1];
    controllerAuthority: TAccountMetas[2];
    authority: TAccountMetas[3];
    permission: TAccountMetas[4];
    integration: TAccountMetas[5];
    programId: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: InitializeIntegrationInstructionData;
};

export function parseInitializeIntegrationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeIntegrationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      permission: getNextAccount(),
      integration: getNextAccount(),
      programId: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeIntegrationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
