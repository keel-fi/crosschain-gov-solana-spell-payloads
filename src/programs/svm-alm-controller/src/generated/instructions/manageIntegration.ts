/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getIntegrationStatusDecoder,
  getIntegrationStatusEncoder,
  type IntegrationStatus,
  type IntegrationStatusArgs,
} from '../types';

export const MANAGE_INTEGRATION_DISCRIMINATOR = 7;

export function getManageIntegrationDiscriminatorBytes() {
  return getU8Encoder().encode(MANAGE_INTEGRATION_DISCRIMINATOR);
}

export type ManageIntegrationInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPermission extends string | AccountMeta<string> = string,
  TAccountIntegration extends string | AccountMeta<string> = string,
  TAccountProgramId extends
    | string
    | AccountMeta<string> = 'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPermission extends string
        ? ReadonlyAccount<TAccountPermission>
        : TAccountPermission,
      TAccountIntegration extends string
        ? WritableAccount<TAccountIntegration>
        : TAccountIntegration,
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      ...TRemainingAccounts,
    ]
  >;

export type ManageIntegrationInstructionData = {
  discriminator: number;
  status: Option<IntegrationStatus>;
  description: Option<ReadonlyUint8Array>;
  rateLimitSlope: Option<bigint>;
  rateLimitMaxOutflow: Option<bigint>;
};

export type ManageIntegrationInstructionDataArgs = {
  status: OptionOrNullable<IntegrationStatusArgs>;
  description: OptionOrNullable<ReadonlyUint8Array>;
  rateLimitSlope: OptionOrNullable<number | bigint>;
  rateLimitMaxOutflow: OptionOrNullable<number | bigint>;
};

export function getManageIntegrationInstructionDataEncoder(): Encoder<ManageIntegrationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['status', getOptionEncoder(getIntegrationStatusEncoder())],
      ['description', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['rateLimitSlope', getOptionEncoder(getU64Encoder())],
      ['rateLimitMaxOutflow', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: MANAGE_INTEGRATION_DISCRIMINATOR })
  );
}

export function getManageIntegrationInstructionDataDecoder(): Decoder<ManageIntegrationInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['status', getOptionDecoder(getIntegrationStatusDecoder())],
    ['description', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['rateLimitSlope', getOptionDecoder(getU64Decoder())],
    ['rateLimitMaxOutflow', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getManageIntegrationInstructionDataCodec(): Codec<
  ManageIntegrationInstructionDataArgs,
  ManageIntegrationInstructionData
> {
  return combineCodec(
    getManageIntegrationInstructionDataEncoder(),
    getManageIntegrationInstructionDataDecoder()
  );
}

export type ManageIntegrationInput<
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPermission extends string = string,
  TAccountIntegration extends string = string,
  TAccountProgramId extends string = string,
> = {
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  permission: Address<TAccountPermission>;
  integration: Address<TAccountIntegration>;
  programId?: Address<TAccountProgramId>;
  status: ManageIntegrationInstructionDataArgs['status'];
  description: ManageIntegrationInstructionDataArgs['description'];
  rateLimitSlope: ManageIntegrationInstructionDataArgs['rateLimitSlope'];
  rateLimitMaxOutflow: ManageIntegrationInstructionDataArgs['rateLimitMaxOutflow'];
};

export function getManageIntegrationInstruction<
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPermission extends string,
  TAccountIntegration extends string,
  TAccountProgramId extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: ManageIntegrationInput<
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountProgramId
  >,
  config?: { programAddress?: TProgramAddress }
): ManageIntegrationInstruction<
  TProgramAddress,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPermission,
  TAccountIntegration,
  TAccountProgramId
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    permission: { value: input.permission ?? null, isWritable: false },
    integration: { value: input.integration ?? null, isWritable: true },
    programId: { value: input.programId ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.permission),
      getAccountMeta(accounts.integration),
      getAccountMeta(accounts.programId),
    ],
    data: getManageIntegrationInstructionDataEncoder().encode(
      args as ManageIntegrationInstructionDataArgs
    ),
    programAddress,
  } as ManageIntegrationInstruction<
    TProgramAddress,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountProgramId
  >);
}

export type ParsedManageIntegrationInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    controller: TAccountMetas[0];
    controllerAuthority: TAccountMetas[1];
    authority: TAccountMetas[2];
    permission: TAccountMetas[3];
    integration: TAccountMetas[4];
    programId: TAccountMetas[5];
  };
  data: ManageIntegrationInstructionData;
};

export function parseManageIntegrationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedManageIntegrationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      permission: getNextAccount(),
      integration: getNextAccount(),
      programId: getNextAccount(),
    },
    data: getManageIntegrationInstructionDataDecoder().decode(instruction.data),
  };
}
