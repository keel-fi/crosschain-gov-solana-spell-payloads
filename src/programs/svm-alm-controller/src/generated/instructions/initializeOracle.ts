/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_ORACLE_DISCRIMINATOR = 12;

export function getInitializeOracleDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_ORACLE_DISCRIMINATOR);
}

export type InitializeOracleInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPriceFeed extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPriceFeed extends string
        ? ReadonlyAccount<TAccountPriceFeed>
        : TAccountPriceFeed,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeOracleInstructionData = {
  discriminator: number;
  oracleType: number;
  nonce: Address;
  baseMint: Address;
  quoteMint: Address;
};

export type InitializeOracleInstructionDataArgs = {
  oracleType: number;
  nonce: Address;
  baseMint: Address;
  quoteMint: Address;
};

export function getInitializeOracleInstructionDataEncoder(): FixedSizeEncoder<InitializeOracleInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['oracleType', getU8Encoder()],
      ['nonce', getAddressEncoder()],
      ['baseMint', getAddressEncoder()],
      ['quoteMint', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_ORACLE_DISCRIMINATOR })
  );
}

export function getInitializeOracleInstructionDataDecoder(): FixedSizeDecoder<InitializeOracleInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['oracleType', getU8Decoder()],
    ['nonce', getAddressDecoder()],
    ['baseMint', getAddressDecoder()],
    ['quoteMint', getAddressDecoder()],
  ]);
}

export function getInitializeOracleInstructionDataCodec(): FixedSizeCodec<
  InitializeOracleInstructionDataArgs,
  InitializeOracleInstructionData
> {
  return combineCodec(
    getInitializeOracleInstructionDataEncoder(),
    getInitializeOracleInstructionDataDecoder()
  );
}

export type InitializeOracleInput<
  TAccountPayer extends string = string,
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPriceFeed extends string = string,
  TAccountOracle extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  priceFeed: Address<TAccountPriceFeed>;
  oracle: Address<TAccountOracle>;
  systemProgram?: Address<TAccountSystemProgram>;
  oracleType: InitializeOracleInstructionDataArgs['oracleType'];
  nonce: InitializeOracleInstructionDataArgs['nonce'];
  baseMint: InitializeOracleInstructionDataArgs['baseMint'];
  quoteMint: InitializeOracleInstructionDataArgs['quoteMint'];
};

export function getInitializeOracleInstruction<
  TAccountPayer extends string,
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPriceFeed extends string,
  TAccountOracle extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: InitializeOracleInput<
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPriceFeed,
    TAccountOracle,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeOracleInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPriceFeed,
  TAccountOracle,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    priceFeed: { value: input.priceFeed ?? null, isWritable: false },
    oracle: { value: input.oracle ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.priceFeed),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeOracleInstructionDataEncoder().encode(
      args as InitializeOracleInstructionDataArgs
    ),
    programAddress,
  } as InitializeOracleInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPriceFeed,
    TAccountOracle,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeOracleInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    controller: TAccountMetas[1];
    controllerAuthority: TAccountMetas[2];
    authority: TAccountMetas[3];
    priceFeed: TAccountMetas[4];
    oracle: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: InitializeOracleInstructionData;
};

export function parseInitializeOracleInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeOracleInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      priceFeed: getNextAccount(),
      oracle: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeOracleInstructionDataDecoder().decode(instruction.data),
  };
}
