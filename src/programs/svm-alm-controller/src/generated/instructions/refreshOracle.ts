/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REFRESH_ORACLE_DISCRIMINATOR = 14;

export function getRefreshOracleDiscriminatorBytes() {
  return getU8Encoder().encode(REFRESH_ORACLE_DISCRIMINATOR);
}

export type RefreshOracleInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountPriceFeed extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPriceFeed extends string
        ? ReadonlyAccount<TAccountPriceFeed>
        : TAccountPriceFeed,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      ...TRemainingAccounts,
    ]
  >;

export type RefreshOracleInstructionData = { discriminator: number };

export type RefreshOracleInstructionDataArgs = {};

export function getRefreshOracleInstructionDataEncoder(): FixedSizeEncoder<RefreshOracleInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: REFRESH_ORACLE_DISCRIMINATOR })
  );
}

export function getRefreshOracleInstructionDataDecoder(): FixedSizeDecoder<RefreshOracleInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getRefreshOracleInstructionDataCodec(): FixedSizeCodec<
  RefreshOracleInstructionDataArgs,
  RefreshOracleInstructionData
> {
  return combineCodec(
    getRefreshOracleInstructionDataEncoder(),
    getRefreshOracleInstructionDataDecoder()
  );
}

export type RefreshOracleInput<
  TAccountPriceFeed extends string = string,
  TAccountOracle extends string = string,
> = {
  priceFeed: Address<TAccountPriceFeed>;
  oracle: Address<TAccountOracle>;
};

export function getRefreshOracleInstruction<
  TAccountPriceFeed extends string,
  TAccountOracle extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: RefreshOracleInput<TAccountPriceFeed, TAccountOracle>,
  config?: { programAddress?: TProgramAddress }
): RefreshOracleInstruction<
  TProgramAddress,
  TAccountPriceFeed,
  TAccountOracle
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    priceFeed: { value: input.priceFeed ?? null, isWritable: false },
    oracle: { value: input.oracle ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.priceFeed),
      getAccountMeta(accounts.oracle),
    ],
    data: getRefreshOracleInstructionDataEncoder().encode({}),
    programAddress,
  } as RefreshOracleInstruction<
    TProgramAddress,
    TAccountPriceFeed,
    TAccountOracle
  >);
}

export type ParsedRefreshOracleInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    priceFeed: TAccountMetas[0];
    oracle: TAccountMetas[1];
  };
  data: RefreshOracleInstructionData;
};

export function parseRefreshOracleInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRefreshOracleInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { priceFeed: getNextAccount(), oracle: getNextAccount() },
    data: getRefreshOracleInstructionDataDecoder().decode(instruction.data),
  };
}
