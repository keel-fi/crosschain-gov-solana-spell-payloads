/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ATOMIC_SWAP_REPAY_DISCRIMINATOR = 16;

export function getAtomicSwapRepayDiscriminatorBytes() {
  return getU8Encoder().encode(ATOMIC_SWAP_REPAY_DISCRIMINATOR);
}

export type AtomicSwapRepayInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPermission extends string | AccountMeta<string> = string,
  TAccountIntegration extends string | AccountMeta<string> = string,
  TAccountReserveA extends string | AccountMeta<string> = string,
  TAccountVaultA extends string | AccountMeta<string> = string,
  TAccountMintA extends string | AccountMeta<string> = string,
  TAccountReserveB extends string | AccountMeta<string> = string,
  TAccountVaultB extends string | AccountMeta<string> = string,
  TAccountMintB extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountPayerAccountA extends string | AccountMeta<string> = string,
  TAccountPayerAccountB extends string | AccountMeta<string> = string,
  TAccountTokenProgramA extends string | AccountMeta<string> = string,
  TAccountTokenProgramB extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPermission extends string
        ? ReadonlyAccount<TAccountPermission>
        : TAccountPermission,
      TAccountIntegration extends string
        ? WritableAccount<TAccountIntegration>
        : TAccountIntegration,
      TAccountReserveA extends string
        ? WritableAccount<TAccountReserveA>
        : TAccountReserveA,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountReserveB extends string
        ? WritableAccount<TAccountReserveB>
        : TAccountReserveB,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountOracle extends string
        ? ReadonlyAccount<TAccountOracle>
        : TAccountOracle,
      TAccountPayerAccountA extends string
        ? WritableAccount<TAccountPayerAccountA>
        : TAccountPayerAccountA,
      TAccountPayerAccountB extends string
        ? WritableAccount<TAccountPayerAccountB>
        : TAccountPayerAccountB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      ...TRemainingAccounts,
    ]
  >;

export type AtomicSwapRepayInstructionData = { discriminator: number };

export type AtomicSwapRepayInstructionDataArgs = {};

export function getAtomicSwapRepayInstructionDataEncoder(): FixedSizeEncoder<AtomicSwapRepayInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: ATOMIC_SWAP_REPAY_DISCRIMINATOR })
  );
}

export function getAtomicSwapRepayInstructionDataDecoder(): FixedSizeDecoder<AtomicSwapRepayInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getAtomicSwapRepayInstructionDataCodec(): FixedSizeCodec<
  AtomicSwapRepayInstructionDataArgs,
  AtomicSwapRepayInstructionData
> {
  return combineCodec(
    getAtomicSwapRepayInstructionDataEncoder(),
    getAtomicSwapRepayInstructionDataDecoder()
  );
}

export type AtomicSwapRepayInput<
  TAccountPayer extends string = string,
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPermission extends string = string,
  TAccountIntegration extends string = string,
  TAccountReserveA extends string = string,
  TAccountVaultA extends string = string,
  TAccountMintA extends string = string,
  TAccountReserveB extends string = string,
  TAccountVaultB extends string = string,
  TAccountMintB extends string = string,
  TAccountOracle extends string = string,
  TAccountPayerAccountA extends string = string,
  TAccountPayerAccountB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  permission: Address<TAccountPermission>;
  integration: Address<TAccountIntegration>;
  reserveA: Address<TAccountReserveA>;
  vaultA: Address<TAccountVaultA>;
  mintA: Address<TAccountMintA>;
  reserveB: Address<TAccountReserveB>;
  vaultB: Address<TAccountVaultB>;
  mintB: Address<TAccountMintB>;
  oracle: Address<TAccountOracle>;
  payerAccountA: Address<TAccountPayerAccountA>;
  payerAccountB: Address<TAccountPayerAccountB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
};

export function getAtomicSwapRepayInstruction<
  TAccountPayer extends string,
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPermission extends string,
  TAccountIntegration extends string,
  TAccountReserveA extends string,
  TAccountVaultA extends string,
  TAccountMintA extends string,
  TAccountReserveB extends string,
  TAccountVaultB extends string,
  TAccountMintB extends string,
  TAccountOracle extends string,
  TAccountPayerAccountA extends string,
  TAccountPayerAccountB extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: AtomicSwapRepayInput<
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountReserveA,
    TAccountVaultA,
    TAccountMintA,
    TAccountReserveB,
    TAccountVaultB,
    TAccountMintB,
    TAccountOracle,
    TAccountPayerAccountA,
    TAccountPayerAccountB,
    TAccountTokenProgramA,
    TAccountTokenProgramB
  >,
  config?: { programAddress?: TProgramAddress }
): AtomicSwapRepayInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPermission,
  TAccountIntegration,
  TAccountReserveA,
  TAccountVaultA,
  TAccountMintA,
  TAccountReserveB,
  TAccountVaultB,
  TAccountMintB,
  TAccountOracle,
  TAccountPayerAccountA,
  TAccountPayerAccountB,
  TAccountTokenProgramA,
  TAccountTokenProgramB
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: false },
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    permission: { value: input.permission ?? null, isWritable: false },
    integration: { value: input.integration ?? null, isWritable: true },
    reserveA: { value: input.reserveA ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    reserveB: { value: input.reserveB ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    mintB: { value: input.mintB ?? null, isWritable: false },
    oracle: { value: input.oracle ?? null, isWritable: false },
    payerAccountA: { value: input.payerAccountA ?? null, isWritable: true },
    payerAccountB: { value: input.payerAccountB ?? null, isWritable: true },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.permission),
      getAccountMeta(accounts.integration),
      getAccountMeta(accounts.reserveA),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.reserveB),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.payerAccountA),
      getAccountMeta(accounts.payerAccountB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
    ],
    data: getAtomicSwapRepayInstructionDataEncoder().encode({}),
    programAddress,
  } as AtomicSwapRepayInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountIntegration,
    TAccountReserveA,
    TAccountVaultA,
    TAccountMintA,
    TAccountReserveB,
    TAccountVaultB,
    TAccountMintB,
    TAccountOracle,
    TAccountPayerAccountA,
    TAccountPayerAccountB,
    TAccountTokenProgramA,
    TAccountTokenProgramB
  >);
}

export type ParsedAtomicSwapRepayInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    controller: TAccountMetas[1];
    controllerAuthority: TAccountMetas[2];
    authority: TAccountMetas[3];
    permission: TAccountMetas[4];
    integration: TAccountMetas[5];
    reserveA: TAccountMetas[6];
    vaultA: TAccountMetas[7];
    mintA: TAccountMetas[8];
    reserveB: TAccountMetas[9];
    vaultB: TAccountMetas[10];
    mintB: TAccountMetas[11];
    oracle: TAccountMetas[12];
    payerAccountA: TAccountMetas[13];
    payerAccountB: TAccountMetas[14];
    tokenProgramA: TAccountMetas[15];
    tokenProgramB: TAccountMetas[16];
  };
  data: AtomicSwapRepayInstructionData;
};

export function parseAtomicSwapRepayInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAtomicSwapRepayInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      permission: getNextAccount(),
      integration: getNextAccount(),
      reserveA: getNextAccount(),
      vaultA: getNextAccount(),
      mintA: getNextAccount(),
      reserveB: getNextAccount(),
      vaultB: getNextAccount(),
      mintB: getNextAccount(),
      oracle: getNextAccount(),
      payerAccountA: getNextAccount(),
      payerAccountB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
    },
    data: getAtomicSwapRepayInstructionDataDecoder().decode(instruction.data),
  };
}
