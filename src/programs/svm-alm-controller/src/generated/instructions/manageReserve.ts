/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SVM_ALM_CONTROLLER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getReserveStatusDecoder,
  getReserveStatusEncoder,
  type ReserveStatus,
  type ReserveStatusArgs,
} from '../types';

export const MANAGE_RESERVE_DISCRIMINATOR = 5;

export function getManageReserveDiscriminatorBytes() {
  return getU8Encoder().encode(MANAGE_RESERVE_DISCRIMINATOR);
}

export type ManageReserveInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountController extends string | AccountMeta<string> = string,
  TAccountControllerAuthority extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPermission extends string | AccountMeta<string> = string,
  TAccountReserve extends string | AccountMeta<string> = string,
  TAccountProgramId extends
    | string
    | AccountMeta<string> = 'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountController extends string
        ? ReadonlyAccount<TAccountController>
        : TAccountController,
      TAccountControllerAuthority extends string
        ? ReadonlyAccount<TAccountControllerAuthority>
        : TAccountControllerAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPermission extends string
        ? ReadonlyAccount<TAccountPermission>
        : TAccountPermission,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      ...TRemainingAccounts,
    ]
  >;

export type ManageReserveInstructionData = {
  discriminator: number;
  status: Option<ReserveStatus>;
  rateLimitSlope: Option<bigint>;
  rateLimitMaxOutflow: Option<bigint>;
};

export type ManageReserveInstructionDataArgs = {
  status: OptionOrNullable<ReserveStatusArgs>;
  rateLimitSlope: OptionOrNullable<number | bigint>;
  rateLimitMaxOutflow: OptionOrNullable<number | bigint>;
};

export function getManageReserveInstructionDataEncoder(): Encoder<ManageReserveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['status', getOptionEncoder(getReserveStatusEncoder())],
      ['rateLimitSlope', getOptionEncoder(getU64Encoder())],
      ['rateLimitMaxOutflow', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: MANAGE_RESERVE_DISCRIMINATOR })
  );
}

export function getManageReserveInstructionDataDecoder(): Decoder<ManageReserveInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['status', getOptionDecoder(getReserveStatusDecoder())],
    ['rateLimitSlope', getOptionDecoder(getU64Decoder())],
    ['rateLimitMaxOutflow', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getManageReserveInstructionDataCodec(): Codec<
  ManageReserveInstructionDataArgs,
  ManageReserveInstructionData
> {
  return combineCodec(
    getManageReserveInstructionDataEncoder(),
    getManageReserveInstructionDataDecoder()
  );
}

export type ManageReserveInput<
  TAccountController extends string = string,
  TAccountControllerAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountPermission extends string = string,
  TAccountReserve extends string = string,
  TAccountProgramId extends string = string,
> = {
  controller: Address<TAccountController>;
  controllerAuthority: Address<TAccountControllerAuthority>;
  authority: TransactionSigner<TAccountAuthority>;
  permission: Address<TAccountPermission>;
  reserve: Address<TAccountReserve>;
  programId?: Address<TAccountProgramId>;
  status: ManageReserveInstructionDataArgs['status'];
  rateLimitSlope: ManageReserveInstructionDataArgs['rateLimitSlope'];
  rateLimitMaxOutflow: ManageReserveInstructionDataArgs['rateLimitMaxOutflow'];
};

export function getManageReserveInstruction<
  TAccountController extends string,
  TAccountControllerAuthority extends string,
  TAccountAuthority extends string,
  TAccountPermission extends string,
  TAccountReserve extends string,
  TAccountProgramId extends string,
  TProgramAddress extends Address = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
>(
  input: ManageReserveInput<
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountReserve,
    TAccountProgramId
  >,
  config?: { programAddress?: TProgramAddress }
): ManageReserveInstruction<
  TProgramAddress,
  TAccountController,
  TAccountControllerAuthority,
  TAccountAuthority,
  TAccountPermission,
  TAccountReserve,
  TAccountProgramId
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SVM_ALM_CONTROLLER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    controller: { value: input.controller ?? null, isWritable: false },
    controllerAuthority: {
      value: input.controllerAuthority ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    permission: { value: input.permission ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    programId: { value: input.programId ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.controller),
      getAccountMeta(accounts.controllerAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.permission),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.programId),
    ],
    data: getManageReserveInstructionDataEncoder().encode(
      args as ManageReserveInstructionDataArgs
    ),
    programAddress,
  } as ManageReserveInstruction<
    TProgramAddress,
    TAccountController,
    TAccountControllerAuthority,
    TAccountAuthority,
    TAccountPermission,
    TAccountReserve,
    TAccountProgramId
  >);
}

export type ParsedManageReserveInstruction<
  TProgram extends string = typeof SVM_ALM_CONTROLLER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    controller: TAccountMetas[0];
    controllerAuthority: TAccountMetas[1];
    authority: TAccountMetas[2];
    permission: TAccountMetas[3];
    reserve: TAccountMetas[4];
    programId: TAccountMetas[5];
  };
  data: ManageReserveInstructionData;
};

export function parseManageReserveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedManageReserveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      controller: getNextAccount(),
      controllerAuthority: getNextAccount(),
      authority: getNextAccount(),
      permission: getNextAccount(),
      reserve: getNextAccount(),
      programId: getNextAccount(),
    },
    data: getManageReserveInstructionDataDecoder().decode(instruction.data),
  };
}
