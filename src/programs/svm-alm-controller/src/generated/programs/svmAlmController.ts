/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAtomicSwapBorrowInstruction,
  type ParsedAtomicSwapRepayInstruction,
  type ParsedEmitEventInstruction,
  type ParsedInitializeControllerInstruction,
  type ParsedInitializeIntegrationInstruction,
  type ParsedInitializeOracleInstruction,
  type ParsedInitializeReserveInstruction,
  type ParsedManageControllerInstruction,
  type ParsedManageIntegrationInstruction,
  type ParsedManagePermissionInstruction,
  type ParsedManageReserveInstruction,
  type ParsedPullInstruction,
  type ParsedPushInstruction,
  type ParsedRefreshOracleInstruction,
  type ParsedResetLzPushInFlightInstruction,
  type ParsedSyncInstruction,
  type ParsedSyncReserveInstruction,
  type ParsedUpdateOracleInstruction,
} from '../instructions';

export const SVM_ALM_CONTROLLER_PROGRAM_ADDRESS =
  'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9' as Address<'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9'>;

export enum SvmAlmControllerAccount {
  Controller,
  Integration,
  Oracle,
  Permission,
  Reserve,
}

export enum SvmAlmControllerInstruction {
  EmitEvent,
  InitializeController,
  ManageController,
  ManagePermission,
  InitializeReserve,
  ManageReserve,
  InitializeIntegration,
  ManageIntegration,
  SyncReserve,
  Sync,
  Push,
  Pull,
  InitializeOracle,
  UpdateOracle,
  RefreshOracle,
  AtomicSwapBorrow,
  AtomicSwapRepay,
  ResetLzPushInFlight,
}

export function identifySvmAlmControllerInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SvmAlmControllerInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SvmAlmControllerInstruction.EmitEvent;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SvmAlmControllerInstruction.InitializeController;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return SvmAlmControllerInstruction.ManageController;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return SvmAlmControllerInstruction.ManagePermission;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return SvmAlmControllerInstruction.InitializeReserve;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return SvmAlmControllerInstruction.ManageReserve;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return SvmAlmControllerInstruction.InitializeIntegration;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return SvmAlmControllerInstruction.ManageIntegration;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return SvmAlmControllerInstruction.SyncReserve;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return SvmAlmControllerInstruction.Sync;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return SvmAlmControllerInstruction.Push;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return SvmAlmControllerInstruction.Pull;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return SvmAlmControllerInstruction.InitializeOracle;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return SvmAlmControllerInstruction.UpdateOracle;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return SvmAlmControllerInstruction.RefreshOracle;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return SvmAlmControllerInstruction.AtomicSwapBorrow;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return SvmAlmControllerInstruction.AtomicSwapRepay;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return SvmAlmControllerInstruction.ResetLzPushInFlight;
  }
  throw new Error(
    'The provided instruction could not be identified as a svmAlmController instruction.'
  );
}

export type ParsedSvmAlmControllerInstruction<
  TProgram extends string = 'H3BpbuheXwBnfxjb2L66mxZ9nFhRmUentYwQDspd6yJ9',
> =
  | ({
      instructionType: SvmAlmControllerInstruction.EmitEvent;
    } & ParsedEmitEventInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.InitializeController;
    } & ParsedInitializeControllerInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.ManageController;
    } & ParsedManageControllerInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.ManagePermission;
    } & ParsedManagePermissionInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.InitializeReserve;
    } & ParsedInitializeReserveInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.ManageReserve;
    } & ParsedManageReserveInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.InitializeIntegration;
    } & ParsedInitializeIntegrationInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.ManageIntegration;
    } & ParsedManageIntegrationInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.SyncReserve;
    } & ParsedSyncReserveInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.Sync;
    } & ParsedSyncInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.Push;
    } & ParsedPushInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.Pull;
    } & ParsedPullInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.InitializeOracle;
    } & ParsedInitializeOracleInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.UpdateOracle;
    } & ParsedUpdateOracleInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.RefreshOracle;
    } & ParsedRefreshOracleInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.AtomicSwapBorrow;
    } & ParsedAtomicSwapBorrowInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.AtomicSwapRepay;
    } & ParsedAtomicSwapRepayInstruction<TProgram>)
  | ({
      instructionType: SvmAlmControllerInstruction.ResetLzPushInFlight;
    } & ParsedResetLzPushInFlightInstruction<TProgram>);
