/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getAtomicSwapStateDecoder,
  getAtomicSwapStateEncoder,
  getCctpBridgeStateDecoder,
  getCctpBridgeStateEncoder,
  getLzBridgeStateDecoder,
  getLzBridgeStateEncoder,
  getSplTokenExternalStateDecoder,
  getSplTokenExternalStateEncoder,
  getSplTokenSwapStateDecoder,
  getSplTokenSwapStateEncoder,
  type AtomicSwapState,
  type AtomicSwapStateArgs,
  type CctpBridgeState,
  type CctpBridgeStateArgs,
  type LzBridgeState,
  type LzBridgeStateArgs,
  type SplTokenExternalState,
  type SplTokenExternalStateArgs,
  type SplTokenSwapState,
  type SplTokenSwapStateArgs,
} from '.';

export type IntegrationState =
  | { __kind: 'Undefined'; padding: ReadonlyUint8Array }
  | { __kind: 'SplTokenExternal'; fields: readonly [SplTokenExternalState] }
  | { __kind: 'SplTokenSwap'; fields: readonly [SplTokenSwapState] }
  | { __kind: 'CctpBridge'; fields: readonly [CctpBridgeState] }
  | { __kind: 'LzBridge'; fields: readonly [LzBridgeState] }
  | { __kind: 'AtomicSwap'; fields: readonly [AtomicSwapState] };

export type IntegrationStateArgs =
  | { __kind: 'Undefined'; padding: ReadonlyUint8Array }
  | { __kind: 'SplTokenExternal'; fields: readonly [SplTokenExternalStateArgs] }
  | { __kind: 'SplTokenSwap'; fields: readonly [SplTokenSwapStateArgs] }
  | { __kind: 'CctpBridge'; fields: readonly [CctpBridgeStateArgs] }
  | { __kind: 'LzBridge'; fields: readonly [LzBridgeStateArgs] }
  | { __kind: 'AtomicSwap'; fields: readonly [AtomicSwapStateArgs] };

export function getIntegrationStateEncoder(): FixedSizeEncoder<IntegrationStateArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Undefined',
      getStructEncoder([['padding', fixEncoderSize(getBytesEncoder(), 48)]]),
    ],
    [
      'SplTokenExternal',
      getStructEncoder([
        ['fields', getTupleEncoder([getSplTokenExternalStateEncoder()])],
      ]),
    ],
    [
      'SplTokenSwap',
      getStructEncoder([
        ['fields', getTupleEncoder([getSplTokenSwapStateEncoder()])],
      ]),
    ],
    [
      'CctpBridge',
      getStructEncoder([
        ['fields', getTupleEncoder([getCctpBridgeStateEncoder()])],
      ]),
    ],
    [
      'LzBridge',
      getStructEncoder([
        ['fields', getTupleEncoder([getLzBridgeStateEncoder()])],
      ]),
    ],
    [
      'AtomicSwap',
      getStructEncoder([
        ['fields', getTupleEncoder([getAtomicSwapStateEncoder()])],
      ]),
    ],
  ]) as FixedSizeEncoder<IntegrationStateArgs>;
}

export function getIntegrationStateDecoder(): FixedSizeDecoder<IntegrationState> {
  return getDiscriminatedUnionDecoder([
    [
      'Undefined',
      getStructDecoder([['padding', fixDecoderSize(getBytesDecoder(), 48)]]),
    ],
    [
      'SplTokenExternal',
      getStructDecoder([
        ['fields', getTupleDecoder([getSplTokenExternalStateDecoder()])],
      ]),
    ],
    [
      'SplTokenSwap',
      getStructDecoder([
        ['fields', getTupleDecoder([getSplTokenSwapStateDecoder()])],
      ]),
    ],
    [
      'CctpBridge',
      getStructDecoder([
        ['fields', getTupleDecoder([getCctpBridgeStateDecoder()])],
      ]),
    ],
    [
      'LzBridge',
      getStructDecoder([
        ['fields', getTupleDecoder([getLzBridgeStateDecoder()])],
      ]),
    ],
    [
      'AtomicSwap',
      getStructDecoder([
        ['fields', getTupleDecoder([getAtomicSwapStateDecoder()])],
      ]),
    ],
  ]) as FixedSizeDecoder<IntegrationState>;
}

export function getIntegrationStateCodec(): FixedSizeCodec<
  IntegrationStateArgs,
  IntegrationState
> {
  return combineCodec(
    getIntegrationStateEncoder(),
    getIntegrationStateDecoder()
  );
}

// Data Enum Helpers.
export function integrationState(
  kind: 'Undefined',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationStateArgs,
    '__kind',
    'Undefined'
  >
): GetDiscriminatedUnionVariant<IntegrationStateArgs, '__kind', 'Undefined'>;
export function integrationState(
  kind: 'SplTokenExternal',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationStateArgs,
    '__kind',
    'SplTokenExternal'
  >['fields']
): GetDiscriminatedUnionVariant<
  IntegrationStateArgs,
  '__kind',
  'SplTokenExternal'
>;
export function integrationState(
  kind: 'SplTokenSwap',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationStateArgs,
    '__kind',
    'SplTokenSwap'
  >['fields']
): GetDiscriminatedUnionVariant<IntegrationStateArgs, '__kind', 'SplTokenSwap'>;
export function integrationState(
  kind: 'CctpBridge',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationStateArgs,
    '__kind',
    'CctpBridge'
  >['fields']
): GetDiscriminatedUnionVariant<IntegrationStateArgs, '__kind', 'CctpBridge'>;
export function integrationState(
  kind: 'LzBridge',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationStateArgs,
    '__kind',
    'LzBridge'
  >['fields']
): GetDiscriminatedUnionVariant<IntegrationStateArgs, '__kind', 'LzBridge'>;
export function integrationState(
  kind: 'AtomicSwap',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationStateArgs,
    '__kind',
    'AtomicSwap'
  >['fields']
): GetDiscriminatedUnionVariant<IntegrationStateArgs, '__kind', 'AtomicSwap'>;
export function integrationState<
  K extends IntegrationStateArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isIntegrationState<K extends IntegrationState['__kind']>(
  kind: K,
  value: IntegrationState
): value is IntegrationState & { __kind: K } {
  return value.__kind === kind;
}
