/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type AtomicSwapState = {
  lastBalanceA: bigint;
  lastBalanceB: bigint;
  amountBorrowed: bigint;
  recipientTokenAPre: bigint;
  recipientTokenBPre: bigint;
  padding: ReadonlyUint8Array;
};

export type AtomicSwapStateArgs = {
  lastBalanceA: number | bigint;
  lastBalanceB: number | bigint;
  amountBorrowed: number | bigint;
  recipientTokenAPre: number | bigint;
  recipientTokenBPre: number | bigint;
  padding: ReadonlyUint8Array;
};

export function getAtomicSwapStateEncoder(): FixedSizeEncoder<AtomicSwapStateArgs> {
  return getStructEncoder([
    ['lastBalanceA', getU64Encoder()],
    ['lastBalanceB', getU64Encoder()],
    ['amountBorrowed', getU64Encoder()],
    ['recipientTokenAPre', getU64Encoder()],
    ['recipientTokenBPre', getU64Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 8)],
  ]);
}

export function getAtomicSwapStateDecoder(): FixedSizeDecoder<AtomicSwapState> {
  return getStructDecoder([
    ['lastBalanceA', getU64Decoder()],
    ['lastBalanceB', getU64Decoder()],
    ['amountBorrowed', getU64Decoder()],
    ['recipientTokenAPre', getU64Decoder()],
    ['recipientTokenBPre', getU64Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAtomicSwapStateCodec(): FixedSizeCodec<
  AtomicSwapStateArgs,
  AtomicSwapState
> {
  return combineCodec(getAtomicSwapStateEncoder(), getAtomicSwapStateDecoder());
}
