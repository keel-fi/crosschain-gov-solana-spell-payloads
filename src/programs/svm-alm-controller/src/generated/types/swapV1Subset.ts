/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

export type SwapV1Subset = {
  isInitialized: boolean;
  bumpSeed: number;
  tokenProgramId: Address;
  tokenA: Address;
  tokenB: Address;
  poolMint: Address;
  tokenAMint: Address;
  tokenBMint: Address;
  poolFeeAccount: Address;
};

export type SwapV1SubsetArgs = SwapV1Subset;

export function getSwapV1SubsetEncoder(): FixedSizeEncoder<SwapV1SubsetArgs> {
  return getStructEncoder([
    ['isInitialized', getBooleanEncoder()],
    ['bumpSeed', getU8Encoder()],
    ['tokenProgramId', getAddressEncoder()],
    ['tokenA', getAddressEncoder()],
    ['tokenB', getAddressEncoder()],
    ['poolMint', getAddressEncoder()],
    ['tokenAMint', getAddressEncoder()],
    ['tokenBMint', getAddressEncoder()],
    ['poolFeeAccount', getAddressEncoder()],
  ]);
}

export function getSwapV1SubsetDecoder(): FixedSizeDecoder<SwapV1Subset> {
  return getStructDecoder([
    ['isInitialized', getBooleanDecoder()],
    ['bumpSeed', getU8Decoder()],
    ['tokenProgramId', getAddressDecoder()],
    ['tokenA', getAddressDecoder()],
    ['tokenB', getAddressDecoder()],
    ['poolMint', getAddressDecoder()],
    ['tokenAMint', getAddressDecoder()],
    ['tokenBMint', getAddressDecoder()],
    ['poolFeeAccount', getAddressDecoder()],
  ]);
}

export function getSwapV1SubsetCodec(): FixedSizeCodec<
  SwapV1SubsetArgs,
  SwapV1Subset
> {
  return combineCodec(getSwapV1SubsetEncoder(), getSwapV1SubsetDecoder());
}
