/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUnitDecoder,
  getUnitEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';

export type InitializeArgs =
  | { __kind: 'SplTokenExternal' }
  | { __kind: 'SplTokenSwap' }
  | {
      __kind: 'CctpBridge';
      destinationAddress: Address;
      destinationDomain: number;
    }
  | { __kind: 'LzBridge'; destinationAddress: Address; destinationEid: number }
  | {
      __kind: 'AtomicSwap';
      maxSlippageBps: number;
      maxStaleness: bigint;
      expiryTimestamp: bigint;
      oraclePriceInverted: boolean;
    };

export type InitializeArgsArgs =
  | { __kind: 'SplTokenExternal' }
  | { __kind: 'SplTokenSwap' }
  | {
      __kind: 'CctpBridge';
      destinationAddress: Address;
      destinationDomain: number;
    }
  | { __kind: 'LzBridge'; destinationAddress: Address; destinationEid: number }
  | {
      __kind: 'AtomicSwap';
      maxSlippageBps: number;
      maxStaleness: number | bigint;
      expiryTimestamp: number | bigint;
      oraclePriceInverted: boolean;
    };

export function getInitializeArgsEncoder(): Encoder<InitializeArgsArgs> {
  return getDiscriminatedUnionEncoder([
    ['SplTokenExternal', getUnitEncoder()],
    ['SplTokenSwap', getUnitEncoder()],
    [
      'CctpBridge',
      getStructEncoder([
        ['destinationAddress', getAddressEncoder()],
        ['destinationDomain', getU32Encoder()],
      ]),
    ],
    [
      'LzBridge',
      getStructEncoder([
        ['destinationAddress', getAddressEncoder()],
        ['destinationEid', getU32Encoder()],
      ]),
    ],
    [
      'AtomicSwap',
      getStructEncoder([
        ['maxSlippageBps', getU16Encoder()],
        ['maxStaleness', getU64Encoder()],
        ['expiryTimestamp', getI64Encoder()],
        ['oraclePriceInverted', getBooleanEncoder()],
      ]),
    ],
  ]);
}

export function getInitializeArgsDecoder(): Decoder<InitializeArgs> {
  return getDiscriminatedUnionDecoder([
    ['SplTokenExternal', getUnitDecoder()],
    ['SplTokenSwap', getUnitDecoder()],
    [
      'CctpBridge',
      getStructDecoder([
        ['destinationAddress', getAddressDecoder()],
        ['destinationDomain', getU32Decoder()],
      ]),
    ],
    [
      'LzBridge',
      getStructDecoder([
        ['destinationAddress', getAddressDecoder()],
        ['destinationEid', getU32Decoder()],
      ]),
    ],
    [
      'AtomicSwap',
      getStructDecoder([
        ['maxSlippageBps', getU16Decoder()],
        ['maxStaleness', getU64Decoder()],
        ['expiryTimestamp', getI64Decoder()],
        ['oraclePriceInverted', getBooleanDecoder()],
      ]),
    ],
  ]);
}

export function getInitializeArgsCodec(): Codec<
  InitializeArgsArgs,
  InitializeArgs
> {
  return combineCodec(getInitializeArgsEncoder(), getInitializeArgsDecoder());
}

// Data Enum Helpers.
export function initializeArgs(
  kind: 'SplTokenExternal'
): GetDiscriminatedUnionVariant<
  InitializeArgsArgs,
  '__kind',
  'SplTokenExternal'
>;
export function initializeArgs(
  kind: 'SplTokenSwap'
): GetDiscriminatedUnionVariant<InitializeArgsArgs, '__kind', 'SplTokenSwap'>;
export function initializeArgs(
  kind: 'CctpBridge',
  data: GetDiscriminatedUnionVariantContent<
    InitializeArgsArgs,
    '__kind',
    'CctpBridge'
  >
): GetDiscriminatedUnionVariant<InitializeArgsArgs, '__kind', 'CctpBridge'>;
export function initializeArgs(
  kind: 'LzBridge',
  data: GetDiscriminatedUnionVariantContent<
    InitializeArgsArgs,
    '__kind',
    'LzBridge'
  >
): GetDiscriminatedUnionVariant<InitializeArgsArgs, '__kind', 'LzBridge'>;
export function initializeArgs(
  kind: 'AtomicSwap',
  data: GetDiscriminatedUnionVariantContent<
    InitializeArgsArgs,
    '__kind',
    'AtomicSwap'
  >
): GetDiscriminatedUnionVariant<InitializeArgsArgs, '__kind', 'AtomicSwap'>;
export function initializeArgs<K extends InitializeArgsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isInitializeArgs<K extends InitializeArgs['__kind']>(
  kind: K,
  value: InitializeArgs
): value is InitializeArgs & { __kind: K } {
  return value.__kind === kind;
}
