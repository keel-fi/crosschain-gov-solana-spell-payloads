/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getUnitDecoder,
  getUnitEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';

export type PullArgs =
  | { __kind: 'SplTokenExternal' }
  | {
      __kind: 'SplTokenSwap';
      amountA: bigint;
      amountB: bigint;
      maximumPoolTokenAmountA: bigint;
      maximumPoolTokenAmountB: bigint;
    }
  | { __kind: 'CctpBridge' }
  | { __kind: 'LzBridge' };

export type PullArgsArgs =
  | { __kind: 'SplTokenExternal' }
  | {
      __kind: 'SplTokenSwap';
      amountA: number | bigint;
      amountB: number | bigint;
      maximumPoolTokenAmountA: number | bigint;
      maximumPoolTokenAmountB: number | bigint;
    }
  | { __kind: 'CctpBridge' }
  | { __kind: 'LzBridge' };

export function getPullArgsEncoder(): Encoder<PullArgsArgs> {
  return getDiscriminatedUnionEncoder([
    ['SplTokenExternal', getUnitEncoder()],
    [
      'SplTokenSwap',
      getStructEncoder([
        ['amountA', getU64Encoder()],
        ['amountB', getU64Encoder()],
        ['maximumPoolTokenAmountA', getU64Encoder()],
        ['maximumPoolTokenAmountB', getU64Encoder()],
      ]),
    ],
    ['CctpBridge', getUnitEncoder()],
    ['LzBridge', getUnitEncoder()],
  ]);
}

export function getPullArgsDecoder(): Decoder<PullArgs> {
  return getDiscriminatedUnionDecoder([
    ['SplTokenExternal', getUnitDecoder()],
    [
      'SplTokenSwap',
      getStructDecoder([
        ['amountA', getU64Decoder()],
        ['amountB', getU64Decoder()],
        ['maximumPoolTokenAmountA', getU64Decoder()],
        ['maximumPoolTokenAmountB', getU64Decoder()],
      ]),
    ],
    ['CctpBridge', getUnitDecoder()],
    ['LzBridge', getUnitDecoder()],
  ]);
}

export function getPullArgsCodec(): Codec<PullArgsArgs, PullArgs> {
  return combineCodec(getPullArgsEncoder(), getPullArgsDecoder());
}

// Data Enum Helpers.
export function pullArgs(
  kind: 'SplTokenExternal'
): GetDiscriminatedUnionVariant<PullArgsArgs, '__kind', 'SplTokenExternal'>;
export function pullArgs(
  kind: 'SplTokenSwap',
  data: GetDiscriminatedUnionVariantContent<
    PullArgsArgs,
    '__kind',
    'SplTokenSwap'
  >
): GetDiscriminatedUnionVariant<PullArgsArgs, '__kind', 'SplTokenSwap'>;
export function pullArgs(
  kind: 'CctpBridge'
): GetDiscriminatedUnionVariant<PullArgsArgs, '__kind', 'CctpBridge'>;
export function pullArgs(
  kind: 'LzBridge'
): GetDiscriminatedUnionVariant<PullArgsArgs, '__kind', 'LzBridge'>;
export function pullArgs<K extends PullArgsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isPullArgs<K extends PullArgs['__kind']>(
  kind: K,
  value: PullArgs
): value is PullArgs & { __kind: K } {
  return value.__kind === kind;
}
