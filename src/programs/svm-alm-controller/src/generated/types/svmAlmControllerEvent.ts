/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getAccountingEventDecoder,
  getAccountingEventEncoder,
  getControllerUpdateEventDecoder,
  getControllerUpdateEventEncoder,
  getIntegrationUpdateEventDecoder,
  getIntegrationUpdateEventEncoder,
  getOracleUpdateEventDecoder,
  getOracleUpdateEventEncoder,
  getPermissionUpdateEventDecoder,
  getPermissionUpdateEventEncoder,
  getReserveUpdateEventDecoder,
  getReserveUpdateEventEncoder,
  type AccountingEvent,
  type AccountingEventArgs,
  type ControllerUpdateEvent,
  type ControllerUpdateEventArgs,
  type IntegrationUpdateEvent,
  type IntegrationUpdateEventArgs,
  type OracleUpdateEvent,
  type OracleUpdateEventArgs,
  type PermissionUpdateEvent,
  type PermissionUpdateEventArgs,
  type ReserveUpdateEvent,
  type ReserveUpdateEventArgs,
} from '.';

export type SvmAlmControllerEvent =
  | { __kind: 'ControllerUpdate'; fields: readonly [ControllerUpdateEvent] }
  | { __kind: 'PermissionUpdate'; fields: readonly [PermissionUpdateEvent] }
  | { __kind: 'ReserveUpdate'; fields: readonly [ReserveUpdateEvent] }
  | { __kind: 'IntegrationUpdate'; fields: readonly [IntegrationUpdateEvent] }
  | { __kind: 'AccountingEvent'; fields: readonly [AccountingEvent] }
  | { __kind: 'OracleUpdate'; fields: readonly [OracleUpdateEvent] };

export type SvmAlmControllerEventArgs =
  | { __kind: 'ControllerUpdate'; fields: readonly [ControllerUpdateEventArgs] }
  | { __kind: 'PermissionUpdate'; fields: readonly [PermissionUpdateEventArgs] }
  | { __kind: 'ReserveUpdate'; fields: readonly [ReserveUpdateEventArgs] }
  | {
      __kind: 'IntegrationUpdate';
      fields: readonly [IntegrationUpdateEventArgs];
    }
  | { __kind: 'AccountingEvent'; fields: readonly [AccountingEventArgs] }
  | { __kind: 'OracleUpdate'; fields: readonly [OracleUpdateEventArgs] };

export function getSvmAlmControllerEventEncoder(): Encoder<SvmAlmControllerEventArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'ControllerUpdate',
      getStructEncoder([
        ['fields', getTupleEncoder([getControllerUpdateEventEncoder()])],
      ]),
    ],
    [
      'PermissionUpdate',
      getStructEncoder([
        ['fields', getTupleEncoder([getPermissionUpdateEventEncoder()])],
      ]),
    ],
    [
      'ReserveUpdate',
      getStructEncoder([
        ['fields', getTupleEncoder([getReserveUpdateEventEncoder()])],
      ]),
    ],
    [
      'IntegrationUpdate',
      getStructEncoder([
        ['fields', getTupleEncoder([getIntegrationUpdateEventEncoder()])],
      ]),
    ],
    [
      'AccountingEvent',
      getStructEncoder([
        ['fields', getTupleEncoder([getAccountingEventEncoder()])],
      ]),
    ],
    [
      'OracleUpdate',
      getStructEncoder([
        ['fields', getTupleEncoder([getOracleUpdateEventEncoder()])],
      ]),
    ],
  ]);
}

export function getSvmAlmControllerEventDecoder(): Decoder<SvmAlmControllerEvent> {
  return getDiscriminatedUnionDecoder([
    [
      'ControllerUpdate',
      getStructDecoder([
        ['fields', getTupleDecoder([getControllerUpdateEventDecoder()])],
      ]),
    ],
    [
      'PermissionUpdate',
      getStructDecoder([
        ['fields', getTupleDecoder([getPermissionUpdateEventDecoder()])],
      ]),
    ],
    [
      'ReserveUpdate',
      getStructDecoder([
        ['fields', getTupleDecoder([getReserveUpdateEventDecoder()])],
      ]),
    ],
    [
      'IntegrationUpdate',
      getStructDecoder([
        ['fields', getTupleDecoder([getIntegrationUpdateEventDecoder()])],
      ]),
    ],
    [
      'AccountingEvent',
      getStructDecoder([
        ['fields', getTupleDecoder([getAccountingEventDecoder()])],
      ]),
    ],
    [
      'OracleUpdate',
      getStructDecoder([
        ['fields', getTupleDecoder([getOracleUpdateEventDecoder()])],
      ]),
    ],
  ]);
}

export function getSvmAlmControllerEventCodec(): Codec<
  SvmAlmControllerEventArgs,
  SvmAlmControllerEvent
> {
  return combineCodec(
    getSvmAlmControllerEventEncoder(),
    getSvmAlmControllerEventDecoder()
  );
}

// Data Enum Helpers.
export function svmAlmControllerEvent(
  kind: 'ControllerUpdate',
  data: GetDiscriminatedUnionVariantContent<
    SvmAlmControllerEventArgs,
    '__kind',
    'ControllerUpdate'
  >['fields']
): GetDiscriminatedUnionVariant<
  SvmAlmControllerEventArgs,
  '__kind',
  'ControllerUpdate'
>;
export function svmAlmControllerEvent(
  kind: 'PermissionUpdate',
  data: GetDiscriminatedUnionVariantContent<
    SvmAlmControllerEventArgs,
    '__kind',
    'PermissionUpdate'
  >['fields']
): GetDiscriminatedUnionVariant<
  SvmAlmControllerEventArgs,
  '__kind',
  'PermissionUpdate'
>;
export function svmAlmControllerEvent(
  kind: 'ReserveUpdate',
  data: GetDiscriminatedUnionVariantContent<
    SvmAlmControllerEventArgs,
    '__kind',
    'ReserveUpdate'
  >['fields']
): GetDiscriminatedUnionVariant<
  SvmAlmControllerEventArgs,
  '__kind',
  'ReserveUpdate'
>;
export function svmAlmControllerEvent(
  kind: 'IntegrationUpdate',
  data: GetDiscriminatedUnionVariantContent<
    SvmAlmControllerEventArgs,
    '__kind',
    'IntegrationUpdate'
  >['fields']
): GetDiscriminatedUnionVariant<
  SvmAlmControllerEventArgs,
  '__kind',
  'IntegrationUpdate'
>;
export function svmAlmControllerEvent(
  kind: 'AccountingEvent',
  data: GetDiscriminatedUnionVariantContent<
    SvmAlmControllerEventArgs,
    '__kind',
    'AccountingEvent'
  >['fields']
): GetDiscriminatedUnionVariant<
  SvmAlmControllerEventArgs,
  '__kind',
  'AccountingEvent'
>;
export function svmAlmControllerEvent(
  kind: 'OracleUpdate',
  data: GetDiscriminatedUnionVariantContent<
    SvmAlmControllerEventArgs,
    '__kind',
    'OracleUpdate'
  >['fields']
): GetDiscriminatedUnionVariant<
  SvmAlmControllerEventArgs,
  '__kind',
  'OracleUpdate'
>;
export function svmAlmControllerEvent<
  K extends SvmAlmControllerEventArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isSvmAlmControllerEvent<
  K extends SvmAlmControllerEvent['__kind'],
>(
  kind: K,
  value: SvmAlmControllerEvent
): value is SvmAlmControllerEvent & { __kind: K } {
  return value.__kind === kind;
}
