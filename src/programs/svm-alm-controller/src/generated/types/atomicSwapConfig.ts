/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type AtomicSwapConfig = {
  inputToken: Address;
  outputToken: Address;
  oracle: Address;
  maxStaleness: bigint;
  expiryTimestamp: bigint;
  maxSlippageBps: number;
  inputMintDecimals: number;
  outputMintDecimals: number;
  oraclePriceInverted: boolean;
  padding: ReadonlyUint8Array;
};

export type AtomicSwapConfigArgs = {
  inputToken: Address;
  outputToken: Address;
  oracle: Address;
  maxStaleness: number | bigint;
  expiryTimestamp: number | bigint;
  maxSlippageBps: number;
  inputMintDecimals: number;
  outputMintDecimals: number;
  oraclePriceInverted: boolean;
  padding: ReadonlyUint8Array;
};

export function getAtomicSwapConfigEncoder(): FixedSizeEncoder<AtomicSwapConfigArgs> {
  return getStructEncoder([
    ['inputToken', getAddressEncoder()],
    ['outputToken', getAddressEncoder()],
    ['oracle', getAddressEncoder()],
    ['maxStaleness', getU64Encoder()],
    ['expiryTimestamp', getI64Encoder()],
    ['maxSlippageBps', getU16Encoder()],
    ['inputMintDecimals', getU8Encoder()],
    ['outputMintDecimals', getU8Encoder()],
    ['oraclePriceInverted', getBooleanEncoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 107)],
  ]);
}

export function getAtomicSwapConfigDecoder(): FixedSizeDecoder<AtomicSwapConfig> {
  return getStructDecoder([
    ['inputToken', getAddressDecoder()],
    ['outputToken', getAddressDecoder()],
    ['oracle', getAddressDecoder()],
    ['maxStaleness', getU64Decoder()],
    ['expiryTimestamp', getI64Decoder()],
    ['maxSlippageBps', getU16Decoder()],
    ['inputMintDecimals', getU8Decoder()],
    ['outputMintDecimals', getU8Decoder()],
    ['oraclePriceInverted', getBooleanDecoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 107)],
  ]);
}

export function getAtomicSwapConfigCodec(): FixedSizeCodec<
  AtomicSwapConfigArgs,
  AtomicSwapConfig
> {
  return combineCodec(
    getAtomicSwapConfigEncoder(),
    getAtomicSwapConfigDecoder()
  );
}
