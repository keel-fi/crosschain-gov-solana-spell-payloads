/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';

export type PushArgs =
  | { __kind: 'SplTokenExternal'; amount: bigint }
  | {
      __kind: 'SplTokenSwap';
      amountA: bigint;
      amountB: bigint;
      minimumPoolTokenAmountA: bigint;
      minimumPoolTokenAmountB: bigint;
    }
  | { __kind: 'CctpBridge'; amount: bigint }
  | { __kind: 'LzBridge'; amount: bigint };

export type PushArgsArgs =
  | { __kind: 'SplTokenExternal'; amount: number | bigint }
  | {
      __kind: 'SplTokenSwap';
      amountA: number | bigint;
      amountB: number | bigint;
      minimumPoolTokenAmountA: number | bigint;
      minimumPoolTokenAmountB: number | bigint;
    }
  | { __kind: 'CctpBridge'; amount: number | bigint }
  | { __kind: 'LzBridge'; amount: number | bigint };

export function getPushArgsEncoder(): Encoder<PushArgsArgs> {
  return getDiscriminatedUnionEncoder([
    ['SplTokenExternal', getStructEncoder([['amount', getU64Encoder()]])],
    [
      'SplTokenSwap',
      getStructEncoder([
        ['amountA', getU64Encoder()],
        ['amountB', getU64Encoder()],
        ['minimumPoolTokenAmountA', getU64Encoder()],
        ['minimumPoolTokenAmountB', getU64Encoder()],
      ]),
    ],
    ['CctpBridge', getStructEncoder([['amount', getU64Encoder()]])],
    ['LzBridge', getStructEncoder([['amount', getU64Encoder()]])],
  ]);
}

export function getPushArgsDecoder(): Decoder<PushArgs> {
  return getDiscriminatedUnionDecoder([
    ['SplTokenExternal', getStructDecoder([['amount', getU64Decoder()]])],
    [
      'SplTokenSwap',
      getStructDecoder([
        ['amountA', getU64Decoder()],
        ['amountB', getU64Decoder()],
        ['minimumPoolTokenAmountA', getU64Decoder()],
        ['minimumPoolTokenAmountB', getU64Decoder()],
      ]),
    ],
    ['CctpBridge', getStructDecoder([['amount', getU64Decoder()]])],
    ['LzBridge', getStructDecoder([['amount', getU64Decoder()]])],
  ]);
}

export function getPushArgsCodec(): Codec<PushArgsArgs, PushArgs> {
  return combineCodec(getPushArgsEncoder(), getPushArgsDecoder());
}

// Data Enum Helpers.
export function pushArgs(
  kind: 'SplTokenExternal',
  data: GetDiscriminatedUnionVariantContent<
    PushArgsArgs,
    '__kind',
    'SplTokenExternal'
  >
): GetDiscriminatedUnionVariant<PushArgsArgs, '__kind', 'SplTokenExternal'>;
export function pushArgs(
  kind: 'SplTokenSwap',
  data: GetDiscriminatedUnionVariantContent<
    PushArgsArgs,
    '__kind',
    'SplTokenSwap'
  >
): GetDiscriminatedUnionVariant<PushArgsArgs, '__kind', 'SplTokenSwap'>;
export function pushArgs(
  kind: 'CctpBridge',
  data: GetDiscriminatedUnionVariantContent<
    PushArgsArgs,
    '__kind',
    'CctpBridge'
  >
): GetDiscriminatedUnionVariant<PushArgsArgs, '__kind', 'CctpBridge'>;
export function pushArgs(
  kind: 'LzBridge',
  data: GetDiscriminatedUnionVariantContent<PushArgsArgs, '__kind', 'LzBridge'>
): GetDiscriminatedUnionVariant<PushArgsArgs, '__kind', 'LzBridge'>;
export function pushArgs<K extends PushArgsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isPushArgs<K extends PushArgs['__kind']>(
  kind: K,
  value: PushArgs
): value is PushArgs & { __kind: K } {
  return value.__kind === kind;
}
