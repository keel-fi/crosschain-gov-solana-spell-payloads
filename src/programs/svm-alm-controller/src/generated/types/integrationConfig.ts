/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getAtomicSwapConfigDecoder,
  getAtomicSwapConfigEncoder,
  getCctpBridgeConfigDecoder,
  getCctpBridgeConfigEncoder,
  getLzBridgeConfigDecoder,
  getLzBridgeConfigEncoder,
  getSplTokenExternalConfigDecoder,
  getSplTokenExternalConfigEncoder,
  getSplTokenSwapConfigDecoder,
  getSplTokenSwapConfigEncoder,
  type AtomicSwapConfig,
  type AtomicSwapConfigArgs,
  type CctpBridgeConfig,
  type CctpBridgeConfigArgs,
  type LzBridgeConfig,
  type LzBridgeConfigArgs,
  type SplTokenExternalConfig,
  type SplTokenExternalConfigArgs,
  type SplTokenSwapConfig,
  type SplTokenSwapConfigArgs,
} from '.';

export type IntegrationConfig =
  | { __kind: 'Undefined'; padding: ReadonlyUint8Array }
  | { __kind: 'SplTokenExternal'; fields: readonly [SplTokenExternalConfig] }
  | { __kind: 'SplTokenSwap'; fields: readonly [SplTokenSwapConfig] }
  | { __kind: 'CctpBridge'; fields: readonly [CctpBridgeConfig] }
  | { __kind: 'LzBridge'; fields: readonly [LzBridgeConfig] }
  | { __kind: 'AtomicSwap'; fields: readonly [AtomicSwapConfig] };

export type IntegrationConfigArgs =
  | { __kind: 'Undefined'; padding: ReadonlyUint8Array }
  | {
      __kind: 'SplTokenExternal';
      fields: readonly [SplTokenExternalConfigArgs];
    }
  | { __kind: 'SplTokenSwap'; fields: readonly [SplTokenSwapConfigArgs] }
  | { __kind: 'CctpBridge'; fields: readonly [CctpBridgeConfigArgs] }
  | { __kind: 'LzBridge'; fields: readonly [LzBridgeConfigArgs] }
  | { __kind: 'AtomicSwap'; fields: readonly [AtomicSwapConfigArgs] };

export function getIntegrationConfigEncoder(): FixedSizeEncoder<IntegrationConfigArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Undefined',
      getStructEncoder([['padding', fixEncoderSize(getBytesEncoder(), 224)]]),
    ],
    [
      'SplTokenExternal',
      getStructEncoder([
        ['fields', getTupleEncoder([getSplTokenExternalConfigEncoder()])],
      ]),
    ],
    [
      'SplTokenSwap',
      getStructEncoder([
        ['fields', getTupleEncoder([getSplTokenSwapConfigEncoder()])],
      ]),
    ],
    [
      'CctpBridge',
      getStructEncoder([
        ['fields', getTupleEncoder([getCctpBridgeConfigEncoder()])],
      ]),
    ],
    [
      'LzBridge',
      getStructEncoder([
        ['fields', getTupleEncoder([getLzBridgeConfigEncoder()])],
      ]),
    ],
    [
      'AtomicSwap',
      getStructEncoder([
        ['fields', getTupleEncoder([getAtomicSwapConfigEncoder()])],
      ]),
    ],
  ]) as FixedSizeEncoder<IntegrationConfigArgs>;
}

export function getIntegrationConfigDecoder(): FixedSizeDecoder<IntegrationConfig> {
  return getDiscriminatedUnionDecoder([
    [
      'Undefined',
      getStructDecoder([['padding', fixDecoderSize(getBytesDecoder(), 224)]]),
    ],
    [
      'SplTokenExternal',
      getStructDecoder([
        ['fields', getTupleDecoder([getSplTokenExternalConfigDecoder()])],
      ]),
    ],
    [
      'SplTokenSwap',
      getStructDecoder([
        ['fields', getTupleDecoder([getSplTokenSwapConfigDecoder()])],
      ]),
    ],
    [
      'CctpBridge',
      getStructDecoder([
        ['fields', getTupleDecoder([getCctpBridgeConfigDecoder()])],
      ]),
    ],
    [
      'LzBridge',
      getStructDecoder([
        ['fields', getTupleDecoder([getLzBridgeConfigDecoder()])],
      ]),
    ],
    [
      'AtomicSwap',
      getStructDecoder([
        ['fields', getTupleDecoder([getAtomicSwapConfigDecoder()])],
      ]),
    ],
  ]) as FixedSizeDecoder<IntegrationConfig>;
}

export function getIntegrationConfigCodec(): FixedSizeCodec<
  IntegrationConfigArgs,
  IntegrationConfig
> {
  return combineCodec(
    getIntegrationConfigEncoder(),
    getIntegrationConfigDecoder()
  );
}

// Data Enum Helpers.
export function integrationConfig(
  kind: 'Undefined',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationConfigArgs,
    '__kind',
    'Undefined'
  >
): GetDiscriminatedUnionVariant<IntegrationConfigArgs, '__kind', 'Undefined'>;
export function integrationConfig(
  kind: 'SplTokenExternal',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationConfigArgs,
    '__kind',
    'SplTokenExternal'
  >['fields']
): GetDiscriminatedUnionVariant<
  IntegrationConfigArgs,
  '__kind',
  'SplTokenExternal'
>;
export function integrationConfig(
  kind: 'SplTokenSwap',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationConfigArgs,
    '__kind',
    'SplTokenSwap'
  >['fields']
): GetDiscriminatedUnionVariant<
  IntegrationConfigArgs,
  '__kind',
  'SplTokenSwap'
>;
export function integrationConfig(
  kind: 'CctpBridge',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationConfigArgs,
    '__kind',
    'CctpBridge'
  >['fields']
): GetDiscriminatedUnionVariant<IntegrationConfigArgs, '__kind', 'CctpBridge'>;
export function integrationConfig(
  kind: 'LzBridge',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationConfigArgs,
    '__kind',
    'LzBridge'
  >['fields']
): GetDiscriminatedUnionVariant<IntegrationConfigArgs, '__kind', 'LzBridge'>;
export function integrationConfig(
  kind: 'AtomicSwap',
  data: GetDiscriminatedUnionVariantContent<
    IntegrationConfigArgs,
    '__kind',
    'AtomicSwap'
  >['fields']
): GetDiscriminatedUnionVariant<IntegrationConfigArgs, '__kind', 'AtomicSwap'>;
export function integrationConfig<
  K extends IntegrationConfigArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isIntegrationConfig<K extends IntegrationConfig['__kind']>(
  kind: K,
  value: IntegrationConfig
): value is IntegrationConfig & { __kind: K } {
  return value.__kind === kind;
}
