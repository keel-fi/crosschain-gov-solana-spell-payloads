/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getPermissionStatusDecoder,
  getPermissionStatusEncoder,
  type PermissionStatus,
  type PermissionStatusArgs,
} from '../types';

export type Permission = {
  controller: Address;
  authority: Address;
  status: PermissionStatus;
  canManagePermissions: boolean;
  canInvokeExternalTransfer: boolean;
  canExecuteSwap: boolean;
  canReallocate: boolean;
  canFreezeController: boolean;
  canUnfreezeController: boolean;
  canManageReservesAndIntegrations: boolean;
  canSuspendPermissions: boolean;
  canLiquidate: boolean;
  padding: ReadonlyUint8Array;
};

export type PermissionArgs = {
  controller: Address;
  authority: Address;
  status: PermissionStatusArgs;
  canManagePermissions: boolean;
  canInvokeExternalTransfer: boolean;
  canExecuteSwap: boolean;
  canReallocate: boolean;
  canFreezeController: boolean;
  canUnfreezeController: boolean;
  canManageReservesAndIntegrations: boolean;
  canSuspendPermissions: boolean;
  canLiquidate: boolean;
  padding: ReadonlyUint8Array;
};

export function getPermissionEncoder(): FixedSizeEncoder<PermissionArgs> {
  return getStructEncoder([
    ['controller', getAddressEncoder()],
    ['authority', getAddressEncoder()],
    ['status', getPermissionStatusEncoder()],
    ['canManagePermissions', getBooleanEncoder()],
    ['canInvokeExternalTransfer', getBooleanEncoder()],
    ['canExecuteSwap', getBooleanEncoder()],
    ['canReallocate', getBooleanEncoder()],
    ['canFreezeController', getBooleanEncoder()],
    ['canUnfreezeController', getBooleanEncoder()],
    ['canManageReservesAndIntegrations', getBooleanEncoder()],
    ['canSuspendPermissions', getBooleanEncoder()],
    ['canLiquidate', getBooleanEncoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 30)],
  ]);
}

export function getPermissionDecoder(): FixedSizeDecoder<Permission> {
  return getStructDecoder([
    ['controller', getAddressDecoder()],
    ['authority', getAddressDecoder()],
    ['status', getPermissionStatusDecoder()],
    ['canManagePermissions', getBooleanDecoder()],
    ['canInvokeExternalTransfer', getBooleanDecoder()],
    ['canExecuteSwap', getBooleanDecoder()],
    ['canReallocate', getBooleanDecoder()],
    ['canFreezeController', getBooleanDecoder()],
    ['canUnfreezeController', getBooleanDecoder()],
    ['canManageReservesAndIntegrations', getBooleanDecoder()],
    ['canSuspendPermissions', getBooleanDecoder()],
    ['canLiquidate', getBooleanDecoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 30)],
  ]);
}

export function getPermissionCodec(): FixedSizeCodec<
  PermissionArgs,
  Permission
> {
  return combineCodec(getPermissionEncoder(), getPermissionDecoder());
}

export function decodePermission<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Permission, TAddress>;
export function decodePermission<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Permission, TAddress>;
export function decodePermission<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Permission, TAddress> | MaybeAccount<Permission, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPermissionDecoder()
  );
}

export async function fetchPermission<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Permission, TAddress>> {
  const maybeAccount = await fetchMaybePermission(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePermission<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Permission, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePermission(maybeAccount);
}

export async function fetchAllPermission(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Permission>[]> {
  const maybeAccounts = await fetchAllMaybePermission(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePermission(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Permission>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePermission(maybeAccount));
}

export function getPermissionSize(): number {
  return 104;
}
