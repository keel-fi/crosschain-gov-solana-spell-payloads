/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getControllerStatusDecoder,
  getControllerStatusEncoder,
  type ControllerStatus,
  type ControllerStatusArgs,
} from '../types';

export type Controller = {
  id: number;
  bump: number;
  status: ControllerStatus;
  authority: Address;
  authorityBump: number;
  padding: ReadonlyUint8Array;
};

export type ControllerArgs = {
  id: number;
  bump: number;
  status: ControllerStatusArgs;
  authority: Address;
  authorityBump: number;
  padding: ReadonlyUint8Array;
};

export function getControllerEncoder(): FixedSizeEncoder<ControllerArgs> {
  return getStructEncoder([
    ['id', getU16Encoder()],
    ['bump', getU8Encoder()],
    ['status', getControllerStatusEncoder()],
    ['authority', getAddressEncoder()],
    ['authorityBump', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 128)],
  ]);
}

export function getControllerDecoder(): FixedSizeDecoder<Controller> {
  return getStructDecoder([
    ['id', getU16Decoder()],
    ['bump', getU8Decoder()],
    ['status', getControllerStatusDecoder()],
    ['authority', getAddressDecoder()],
    ['authorityBump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 128)],
  ]);
}

export function getControllerCodec(): FixedSizeCodec<
  ControllerArgs,
  Controller
> {
  return combineCodec(getControllerEncoder(), getControllerDecoder());
}

export function decodeController<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Controller, TAddress>;
export function decodeController<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Controller, TAddress>;
export function decodeController<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Controller, TAddress> | MaybeAccount<Controller, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getControllerDecoder()
  );
}

export async function fetchController<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Controller, TAddress>> {
  const maybeAccount = await fetchMaybeController(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeController<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Controller, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeController(maybeAccount);
}

export async function fetchAllController(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Controller>[]> {
  const maybeAccounts = await fetchAllMaybeController(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeController(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Controller>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeController(maybeAccount));
}

export function getControllerSize(): number {
  return 165;
}
