/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI128Decoder,
  getI128Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getFeedDecoder,
  getFeedEncoder,
  type Feed,
} from '../types';

export type Oracle = {
  version: number;
  authority: Address;
  nonce: Address;
  value: bigint;
  precision: number;
  lastUpdateSlot: bigint;
  controller: Address;
  baseMint: Address;
  quoteMint: Address;
  reserved: ReadonlyUint8Array;
  feeds: Array<Feed>;
};

export type OracleArgs = {
  version: number;
  authority: Address;
  nonce: Address;
  value: number | bigint;
  precision: number;
  lastUpdateSlot: number | bigint;
  controller: Address;
  baseMint: Address;
  quoteMint: Address;
  reserved: ReadonlyUint8Array;
  feeds: Array<Feed>;
};

export function getOracleEncoder(): FixedSizeEncoder<OracleArgs> {
  return getStructEncoder([
    ['version', getU8Encoder()],
    ['authority', getAddressEncoder()],
    ['nonce', getAddressEncoder()],
    ['value', getI128Encoder()],
    ['precision', getU32Encoder()],
    ['lastUpdateSlot', getU64Encoder()],
    ['controller', getAddressEncoder()],
    ['baseMint', getAddressEncoder()],
    ['quoteMint', getAddressEncoder()],
    ['reserved', fixEncoderSize(getBytesEncoder(), 64)],
    ['feeds', getArrayEncoder(getFeedEncoder(), { size: 1 })],
  ]);
}

export function getOracleDecoder(): FixedSizeDecoder<Oracle> {
  return getStructDecoder([
    ['version', getU8Decoder()],
    ['authority', getAddressDecoder()],
    ['nonce', getAddressDecoder()],
    ['value', getI128Decoder()],
    ['precision', getU32Decoder()],
    ['lastUpdateSlot', getU64Decoder()],
    ['controller', getAddressDecoder()],
    ['baseMint', getAddressDecoder()],
    ['quoteMint', getAddressDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 64)],
    ['feeds', getArrayDecoder(getFeedDecoder(), { size: 1 })],
  ]);
}

export function getOracleCodec(): FixedSizeCodec<OracleArgs, Oracle> {
  return combineCodec(getOracleEncoder(), getOracleDecoder());
}

export function decodeOracle<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Oracle, TAddress>;
export function decodeOracle<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Oracle, TAddress>;
export function decodeOracle<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Oracle, TAddress> | MaybeAccount<Oracle, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOracleDecoder()
  );
}

export async function fetchOracle<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Oracle, TAddress>> {
  const maybeAccount = await fetchMaybeOracle(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOracle<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Oracle, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOracle(maybeAccount);
}

export async function fetchAllOracle(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Oracle>[]> {
  const maybeAccounts = await fetchAllMaybeOracle(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOracle(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Oracle>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeOracle(maybeAccount));
}

export function getOracleSize(): number {
  return 349;
}
