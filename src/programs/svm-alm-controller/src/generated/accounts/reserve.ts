/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getReserveStatusDecoder,
  getReserveStatusEncoder,
  type ReserveStatus,
  type ReserveStatusArgs,
} from '../types';

export type Reserve = {
  controller: Address;
  mint: Address;
  vault: Address;
  status: ReserveStatus;
  rateLimitSlope: bigint;
  rateLimitMaxOutflow: bigint;
  rateLimitOutflowAmountAvailable: bigint;
  rateLimitRemainder: bigint;
  lastBalance: bigint;
  lastRefreshTimestamp: bigint;
  lastRefreshSlot: bigint;
  padding: ReadonlyUint8Array;
};

export type ReserveArgs = {
  controller: Address;
  mint: Address;
  vault: Address;
  status: ReserveStatusArgs;
  rateLimitSlope: number | bigint;
  rateLimitMaxOutflow: number | bigint;
  rateLimitOutflowAmountAvailable: number | bigint;
  rateLimitRemainder: number | bigint;
  lastBalance: number | bigint;
  lastRefreshTimestamp: number | bigint;
  lastRefreshSlot: number | bigint;
  padding: ReadonlyUint8Array;
};

export function getReserveEncoder(): FixedSizeEncoder<ReserveArgs> {
  return getStructEncoder([
    ['controller', getAddressEncoder()],
    ['mint', getAddressEncoder()],
    ['vault', getAddressEncoder()],
    ['status', getReserveStatusEncoder()],
    ['rateLimitSlope', getU64Encoder()],
    ['rateLimitMaxOutflow', getU64Encoder()],
    ['rateLimitOutflowAmountAvailable', getU64Encoder()],
    ['rateLimitRemainder', getU64Encoder()],
    ['lastBalance', getU64Encoder()],
    ['lastRefreshTimestamp', getI64Encoder()],
    ['lastRefreshSlot', getU64Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 120)],
  ]);
}

export function getReserveDecoder(): FixedSizeDecoder<Reserve> {
  return getStructDecoder([
    ['controller', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['vault', getAddressDecoder()],
    ['status', getReserveStatusDecoder()],
    ['rateLimitSlope', getU64Decoder()],
    ['rateLimitMaxOutflow', getU64Decoder()],
    ['rateLimitOutflowAmountAvailable', getU64Decoder()],
    ['rateLimitRemainder', getU64Decoder()],
    ['lastBalance', getU64Decoder()],
    ['lastRefreshTimestamp', getI64Decoder()],
    ['lastRefreshSlot', getU64Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 120)],
  ]);
}

export function getReserveCodec(): FixedSizeCodec<ReserveArgs, Reserve> {
  return combineCodec(getReserveEncoder(), getReserveDecoder());
}

export function decodeReserve<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Reserve, TAddress>;
export function decodeReserve<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Reserve, TAddress>;
export function decodeReserve<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Reserve, TAddress> | MaybeAccount<Reserve, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReserveDecoder()
  );
}

export async function fetchReserve<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Reserve, TAddress>> {
  const maybeAccount = await fetchMaybeReserve(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReserve<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Reserve, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReserve(maybeAccount);
}

export async function fetchAllReserve(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Reserve>[]> {
  const maybeAccounts = await fetchAllMaybeReserve(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReserve(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Reserve>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeReserve(maybeAccount));
}

export function getReserveSize(): number {
  return 273;
}
